{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#app-and-team","title":"App and Team","text":"<pre><code>App Name : GaiaCycle\n\nCustomer : Miriam Salzmann (Founder &amp; CEO)\n\nProfessor/Supervisor: Baseer Baheer\n\nDevelopment Team :\nMarie Belle (Coding Software Engineering 2023 - Current): Project Manager and Full Stack developper,\n\nRishi Ray (Coding Software Engineering 2023 - Current): Front End developper,\n\nBalita (Coding Software Engineering 2023 - Current): Full stack developper,\n\nIker (Coding Software Engineering 2023 - Current): Backend developper,\n\nMartin (Coding Software Engineering 2023 - Current): Front End developper,\n\nSamuel (Coding Software Engineering 2023 - Current): Front end developper,\n</code></pre>"},{"location":"#welcome-to-gaia-cycle-documentation","title":"Welcome to Gaia Cycle Documentation","text":"<p>Welcome to the documentation for Gaia's Cycle! This innovative urban farming project is dedicated to producing fresh vegetables in an environmentally friendly and resource-efficient manner.</p> <p>This guide will walk you through the purpose of Gaia's Cycle, highlight its key features, and provide detailed instructions for setup and usage.</p>"},{"location":"#what-is-gaiacycle","title":"What is GaiaCycle?","text":"<p>GaiaCycle is a web application focused on helping communities manage recyclable and organic waste. By combining user-friendly design with powerful tools, GaiaCycle empowers users to: - Track waste efficiently. - Promote eco-friendly habits. - Collaborate for a greener future.</p>"},{"location":"#features-at-a-glance","title":"Features at a Glance","text":"<ul> <li>Dashboard: Get a quick overview of waste statistics and progress.</li> <li>User Profiles: Manage individual or organizational data.</li> <li>Database Integration: Securely store and retrieve data.</li> <li>Responsive Design: Access the platform on any device.</li> </ul>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>Getting Started - A comprehensive guide to help you set up Gaia's Cycle, including installation instructions, initial configuration, and creating an account.</p> </li> <li> <p>Architecture - An in-depth explanation of Gaia's Cycle\u2019s system architecture, detailing how the app is structured and how its components interact.</p> </li> <li> <p>Features - Overview of the key features of Gaia's Cycle, including user-facing pages, functionality, and how the app helps users manage their urban farming efforts.</p> </li> <li> <p>Components - Detailed documentation of the individual components of the app, explaining their purpose, design, and how they work together.</p> </li> <li> <p>Deployment - Instructions for deploying Gaia's Cycle to different environments, including local setups and production environments, with troubleshooting tips.</p> </li> <li> <p>Development - Information for developers on how to contribute to Gaia's Cycle, including the development workflow, code style guidelines, and building new features.</p> </li> <li> <p>Advanced Topics - A deep dive into more complex topics like database optimization, performance tuning, and advanced configurations of Gaia's Cycle.</p> </li> <li> <p>Troubleshooting - Solutions to common issues users and developers may encounter when using or setting up Gaia's Cycle.</p> </li> </ul>"},{"location":"#how-to-use-this-guide","title":"How to Use This Guide","text":"<p>Navigate through the sections above or use the sidebar menu to find the information you need. Start with Getting Started to set up the app.</p> <p>Together, let\u2019s make sustainability simpler with GaiaCycle!</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"glossary/","title":"Glossary","text":""},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":""},{"location":"troubleshooting/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"troubleshooting/#issue-database-connection-error","title":"Issue: Database Connection Error","text":"<ul> <li>Description: Unable to connect to the MySQL database.</li> <li>Solution:<ol> <li>Verify the MySQL container is running using <code>docker ps</code>.</li> <li>Check the connection details (host, port, username, password).</li> <li>Ensure the <code>MYSQL_ROOT_PASSWORD</code> environment variable matches the configuration.</li> <li>Review MySQL logs with <code>docker logs &lt;container_id&gt;</code>.</li> </ol> </li> </ul>"},{"location":"troubleshooting/#issue-api-returns-500-internal-server-error","title":"Issue: API Returns 500 Internal Server Error","text":"<ul> <li>Description: The backend API fails with a server error.</li> <li>Solution:<ol> <li>Check FastAPI logs for detailed stack trace.</li> <li>Verify the request payload matches the required schema.</li> <li>Ensure database migrations have been applied.</li> </ol> </li> </ul>"},{"location":"troubleshooting/#issue-redis-caching-not-working","title":"Issue: Redis Caching Not Working","text":"<ul> <li>Description: Cached data is not retrieved as expected.</li> <li>Solution:<ol> <li>Verify the Redis container is running.</li> <li>Check Redis logs using <code>docker logs &lt;container_id&gt;</code>.</li> <li>Test connectivity using <code>redis-cli ping</code>.</li> <li>Confirm cache keys and expiration policies in the code.</li> </ol> </li> </ul>"},{"location":"troubleshooting/#issue-frontend-unable-to-fetch-api-data","title":"Issue: Frontend Unable to Fetch API Data","text":"<ul> <li>Description: Frontend fails to load data from the backend API.</li> <li>Solution:<ol> <li>Confirm the backend API is reachable from the frontend by checking network requests in the browser.</li> <li>Verify CORS settings in the FastAPI backend.</li> <li>Check the API URL configuration in the frontend.</li> </ol> </li> </ul>"},{"location":"troubleshooting/#debugging-steps-for-frontendbackend","title":"Debugging Steps for Frontend/Backend","text":""},{"location":"troubleshooting/#frontend-debugging","title":"Frontend Debugging","text":"<ol> <li>Inspect the Browser Console:<ul> <li>Check for JavaScript errors or network request failures.</li> <li>Use the \"Network\" tab in developer tools to verify API responses.</li> </ul> </li> <li>Validate API Endpoints:<ul> <li>Test the backend API using tools like Postman or curl.</li> </ul> </li> <li>Debug React/Vue Components (if applicable):<ul> <li>Add console logs to trace component state and props.</li> <li>Use browser developer tools to inspect component hierarchy.</li> </ul> </li> </ol>"},{"location":"troubleshooting/#backend-debugging","title":"Backend Debugging","text":"<ol> <li>Check Logs:<ul> <li>Inspect FastAPI logs for errors using <code>docker logs &lt;backend_container_id&gt;</code>.</li> </ul> </li> <li>Test Database Queries:<ul> <li>Execute SQL queries directly on the MySQL database to verify data integrity.</li> </ul> </li> <li>Validate Dependencies:<ul> <li>Confirm that all required Python packages are installed and up to date.</li> </ul> </li> <li>Use Debug Mode:<ul> <li>Run the backend in debug mode (<code>uvicorn app:app --reload</code>) for detailed error messages.</li> </ul> </li> </ol>"},{"location":"troubleshooting/#links-to-support-resources","title":"Links to Support Resources","text":""},{"location":"troubleshooting/#official-documentation","title":"Official Documentation","text":"<ul> <li>FastAPI: https://fastapi.tiangolo.com/</li> <li>MySQL: https://dev.mysql.com/doc/</li> <li>Redis: https://redis.io/docs/</li> </ul>"},{"location":"troubleshooting/#community-forums","title":"Community Forums","text":"<ul> <li>Stack Overflow: https://stackoverflow.com/</li> <li>FastAPI Discussions: https://github.com/tiangolo/fastapi/discussions</li> </ul>"},{"location":"troubleshooting/#tools-and-utilities","title":"Tools and Utilities","text":"<ul> <li>Postman: https://www.postman.com/</li> <li>Redis CLI: https://redis.io/docs/ui/cli/</li> <li>Docker Docs: https://docs.docker.com/</li> </ul>"},{"location":"advanced-topics/api-reference/","title":"API Endpoints","text":""},{"location":"advanced-topics/api-reference/#user-endpoints","title":"User Endpoints","text":""},{"location":"advanced-topics/api-reference/#post-apiuser","title":"<code>POST /api/user</code>","text":"<ul> <li>Description: Create a new user</li> <li>Request Body: <code>UserCreate</code> object<ul> <li>Example:   <pre><code>{\n  \"contact\": \"user@example.com\",\n  \"name\": \"John Doe\",\n  \"username\": \"johndoe\",\n  \"password\": \"securepassword123\"\n}\n</code></pre></li> </ul> </li> <li>Response: <code>UserRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"contact\": \"user@example.com\",\n  \"name\": \"John Doe\",\n  \"username\": \"johndoe\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#get-apiuseruser_id","title":"<code>GET /api/user/{user_id}</code>","text":"<ul> <li>Description: Get user by ID</li> <li>Path Parameter: <code>user_id</code> (integer)</li> <li>Response: <code>UserRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"contact\": \"user@example.com\",\n  \"name\": \"John Doe\",\n  \"username\": \"johndoe\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#get-apiuserusernameusername","title":"<code>GET /api/user/username/{username}</code>","text":"<ul> <li>Description: Get user by username</li> <li>Path Parameter: <code>username</code> (string)</li> <li>Response: <code>UserRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"contact\": \"user@example.com\",\n  \"name\": \"John Doe\",\n  \"username\": \"johndoe\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#farm-endpoints","title":"Farm Endpoints","text":""},{"location":"advanced-topics/api-reference/#post-apifarm","title":"<code>POST /api/farm</code>","text":"<ul> <li>Description: Create a new farm</li> <li>Request Body: <code>FarmCreate</code> object<ul> <li>Example:   <pre><code>{\n  \"lat\": 34.0522,\n  \"lon\": -118.2437,\n  \"size\": 150.5\n}\n</code></pre></li> </ul> </li> <li>Response: <code>FarmRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"lat\": 34.0522,\n  \"lon\": -118.2437,\n  \"size\": 150.5\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#get-apifarm","title":"<code>GET /api/farm</code>","text":"<ul> <li>Description: Get all farms</li> <li>Response: List of <code>FarmRead</code> objects<ul> <li>Example:   <pre><code>[\n  {\n    \"id\": 1,\n    \"lat\": 34.0522,\n    \"lon\": -118.2437,\n    \"size\": 150.5\n  },\n  {\n    \"id\": 2,\n    \"lat\": 36.7783,\n    \"lon\": -119.4179,\n    \"size\": 200.0\n  }\n]\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#get-apifarmfarm_id","title":"<code>GET /api/farm/{farm_id}</code>","text":"<ul> <li>Description: Get farm by ID</li> <li>Path Parameter: <code>farm_id</code> (integer)</li> <li>Response: <code>FarmRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"lat\": 34.0522,\n  \"lon\": -118.2437,\n  \"size\": 150.5\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#tower-endpoints","title":"Tower Endpoints","text":""},{"location":"advanced-topics/api-reference/#post-apitower","title":"<code>POST /api/tower</code>","text":"<ul> <li>Description: Create a new tower</li> <li>Request Body: <code>TowerCreate</code> object<ul> <li>Example:   <pre><code>{\n  \"farm_id\": 1,\n  \"slot_amount\": 10\n}\n</code></pre></li> </ul> </li> <li>Response: <code>TowerRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"farm_id\": 1,\n  \"slot_amount\": 10\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#get-apitower","title":"<code>GET /api/tower</code>","text":"<ul> <li>Description: Get all towers</li> <li>Response: List of <code>TowerRead</code> objects<ul> <li>Example:   <pre><code>[\n  {\n    \"id\": 1,\n    \"farm_id\": 1,\n    \"slot_amount\": 10\n  },\n  {\n    \"id\": 2,\n    \"farm_id\": 1,\n    \"slot_amount\": 8\n  }\n]\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#get-apitowertower_id","title":"<code>GET /api/tower/{tower_id}</code>","text":"<ul> <li>Description: Get tower by ID</li> <li>Path Parameter: <code>tower_id</code> (integer)</li> <li>Response: <code>TowerRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"farm_id\": 1,\n  \"slot_amount\": 10\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#device-endpoints","title":"Device Endpoints","text":""},{"location":"advanced-topics/api-reference/#post-apidevice","title":"<code>POST /api/device</code>","text":"<ul> <li>Description: Create a new device</li> <li>Request Body: <code>DeviceCreate</code> object<ul> <li>Example:   <pre><code>{\n  \"tower_id\": 1,\n  \"farm_id\": 1,\n  \"slot_id\": 1,\n  \"device_type\": \"FARM\",\n  \"status\": \"ONLINE\",\n  \"value\": 50,\n  \"unit\": \"kWh\",\n  \"installation_date\": \"2023-01-15\"\n}\n</code></pre></li> </ul> </li> <li>Response: <code>DeviceRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"tower_id\": 1,\n  \"farm_id\": 1,\n  \"slot_id\": 1,\n  \"device_type\": \"FARM\",\n  \"status\": \"ONLINE\",\n  \"value\": 50,\n  \"unit\": \"kWh\",\n  \"installation_date\": \"2023-01-15\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#get-apidevice","title":"<code>GET /api/device</code>","text":"<ul> <li>Description: Get all devices</li> <li>Response: List of <code>DeviceRead</code> objects<ul> <li>Example:   <pre><code>[\n  {\n    \"id\": 1,\n    \"tower_id\": 1,\n    \"farm_id\": 1,\n    \"slot_id\": 1,\n    \"device_type\": \"FARM\",\n    \"status\": \"ONLINE\",\n    \"value\": 50,\n    \"unit\": \"kWh\",\n    \"installation_date\": \"2023-01-15\"\n  }\n]\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#get-apidevicedevice_id","title":"<code>GET /api/device/{device_id}</code>","text":"<ul> <li>Description: Get device by ID</li> <li>Path Parameter: <code>device_id</code> (integer)</li> <li>Response: <code>DeviceRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"tower_id\": 1,\n  \"farm_id\": 1,\n  \"slot_id\": 1,\n  \"device_type\": \"FARM\",\n  \"status\": \"ONLINE\",\n  \"value\": 50,\n  \"unit\": \"kWh\",\n  \"installation_date\": \"2023-01-15\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#slot-endpoints","title":"Slot Endpoints","text":""},{"location":"advanced-topics/api-reference/#post-apislot","title":"<code>POST /api/slot</code>","text":"<ul> <li>Description: Create a new slot</li> <li>Request Body: <code>SlotCreate</code> object<ul> <li>Example:   <pre><code>{\n  \"tower_id\": 1,\n  \"crop\": \"Corn\",\n  \"date_filled\": \"2023-02-01\",\n  \"expected_harvest\": \"2023-05-01\"\n}\n</code></pre></li> </ul> </li> <li>Response: <code>SlotRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"tower_id\": 1,\n  \"crop\": \"Corn\",\n  \"date_filled\": \"2023-02-01\",\n  \"expected_harvest\": \"2023-05-01\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#get-apislot","title":"<code>GET /api/slot</code>","text":"<ul> <li>Description: Get all slots</li> <li>Response: List of <code>SlotRead</code> objects<ul> <li>Example:   <pre><code>[\n  {\n    \"id\": 1,\n    \"tower_id\": 1,\n    \"crop\": \"Corn\",\n    \"date_filled\": \"2023-02-01\",\n    \"expected_harvest\": \"2023-05-01\"\n  }\n]\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#get-apislotslot_id","title":"<code>GET /api/slot/{slot_id}</code>","text":"<ul> <li>Description: Get slot by ID</li> <li>Path Parameter: <code>slot_id</code> (integer)</li> <li>Response: <code>SlotRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"tower_id\": 1,\n  \"crop\": \"Corn\",\n  \"date_filled\": \"2023-02-01\",\n  \"expected_harvest\": \"2023-05-01\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/kafka/","title":"Kafka Integration","text":""},{"location":"advanced-topics/mkdocs/","title":"Welcome to MkDocs","text":"<p>explains our webapp purpose, </p> <p>For full documentation visit mkdocs.org.</p>"},{"location":"advanced-topics/mkdocs/#commands","title":"Commands","text":"<ul> <li>mkdocs new [dir-name] - Create a new project.</li> <li>mkdocs serve - Start the live-reloading docs server.</li> <li>mkdocs build - Build the documentation site.</li> <li>mkdocs -h - Print help message and exit.</li> </ul>"},{"location":"advanced-topics/mkdocs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"advanced-topics/scaling/","title":"Scaling the Application","text":""},{"location":"architecture/database/","title":"Database Documentation","text":""},{"location":"architecture/database/#database-schema-diagram","title":"Database Schema Diagram","text":"<pre><code>[User]\n- id [PK] : Integer\n- contact : String\n- name : String\n- username : String\n\n[Farm]\n- id [PK] : Integer\n- user_id [FK] -&gt; User(id)\n- lat : Float\n- lon : Float\n- size : Float\n\n[Tower]\n- id [PK] : Integer\n- farm_id [FK] -&gt; Farm(id)\n- slot_amount : Integer\n\n[Slot]\n- id [PK] : Integer\n- tower_id [FK] -&gt; Tower(id)\n- crop : String\n- date_filled : Date\n- expected_harvest : Date\n\n[Device]\n- id [PK] : Integer\n- tower_id [FK] -&gt; Tower(id)\n- farm_id [FK] -&gt; Farm(id)\n- slot_id [FK] -&gt; Slot(id)\n- device_type : Enum(FARM, TOWER, SLOT)\n- status : Enum(ONLINE, OFFLINE)\n- value : Integer\n- unit : String\n- installation_date : Date\n</code></pre> <p>Use tools like dbdiagram.io to visualize this schema.</p>"},{"location":"architecture/database/#explanation-of-tables-and-relationships","title":"Explanation of Tables and Relationships","text":""},{"location":"architecture/database/#user-table","title":"User Table","text":"<ul> <li>Purpose: Stores user information.</li> <li>Relationships: Each user can own multiple farms.</li> <li>Fields:<ul> <li><code>id</code>: Primary key.</li> <li><code>contact</code>: Contact information.</li> <li><code>name</code>: User's name.</li> <li><code>username</code>: Unique identifier for login.</li> </ul> </li> </ul>"},{"location":"architecture/database/#farm-table","title":"Farm Table","text":"<ul> <li>Purpose: Represents a farm owned by a user.</li> <li>Relationships: Belongs to a user, contains multiple towers.</li> <li>Fields:<ul> <li><code>user_id</code>: Foreign key to <code>User</code>.</li> <li><code>lat</code>, <code>lon</code>: Latitude and longitude for farm location.</li> <li><code>size</code>: Farm size in hectares.</li> </ul> </li> </ul>"},{"location":"architecture/database/#tower-table","title":"Tower Table","text":"<ul> <li>Purpose: Represents a tower on a farm.</li> <li>Relationships: Belongs to a farm, contains multiple slots.</li> <li>Fields:<ul> <li><code>farm_id</code>: Foreign key to <code>Farm</code>.</li> <li><code>slot_amount</code>: Number of slots available in the tower.</li> </ul> </li> </ul>"},{"location":"architecture/database/#slot-table","title":"Slot Table","text":"<ul> <li>Purpose: Represents slots for planting crops.</li> <li>Relationships: Belongs to a tower, can be associated with a device.</li> <li>Fields:<ul> <li><code>tower_id</code>: Foreign key to <code>Tower</code>.</li> <li><code>crop</code>: Type of crop planted.</li> <li><code>date_filled</code>: Date the slot was filled.</li> <li><code>expected_harvest</code>: Expected harvest date.</li> </ul> </li> </ul>"},{"location":"architecture/database/#device-table","title":"Device Table","text":"<ul> <li>Purpose: Tracks devices installed on farms, towers, or slots.</li> <li>Relationships: Belongs to a tower, farm, or slot.</li> <li>Fields:<ul> <li><code>tower_id</code>, <code>farm_id</code>, <code>slot_id</code>: Foreign keys to their respective tables.</li> <li><code>device_type</code>: Enum indicating the type of device.</li> <li><code>status</code>: Enum indicating whether the device is ONLINE or OFFLINE.</li> <li><code>value</code>: Device-specific measurement value.</li> <li><code>unit</code>: Unit of the measurement (e.g., Celsius, liters).</li> <li><code>installation_date</code>: Date of installation.</li> </ul> </li> </ul>"},{"location":"architecture/database/#data-flow-explanation","title":"Data Flow Explanation","text":"<ol> <li> <p>Data Entry:</p> <ul> <li>User signs up \u2192 A <code>User</code> record is created.</li> <li>User adds a farm \u2192 A <code>Farm</code> record is created with <code>user_id</code>.</li> <li>User adds towers to the farm \u2192 <code>Tower</code> records are created with <code>farm_id</code>.</li> <li>User adds slots and devices \u2192 <code>Slot</code> and <code>Device</code> records are created with references to related towers and farms.</li> </ul> </li> <li> <p>Data Retrieval:</p> <ul> <li>Fetch all farms for a user: Query <code>Farm</code> using <code>user_id</code>.</li> <li>Fetch devices for a farm: Query <code>Device</code> using <code>farm_id</code>.</li> <li>Fetch slot information for a tower: Query <code>Slot</code> using <code>tower_id</code>.</li> </ul> </li> <li> <p>Integration with External Tools:</p> <ul> <li>Redis: Cache frequently queried data like farms and towers.</li> <li>Dockerized Services: Use environment variables to configure database access securely.</li> </ul> </li> </ol>"},{"location":"architecture/database/#example-sql-queries","title":"Example SQL Queries","text":""},{"location":"architecture/database/#fetch-all-farms-for-a-user","title":"Fetch all farms for a user","text":"<pre><code>SELECT *\nFROM Farm\nWHERE user_id = 1;\n</code></pre>"},{"location":"architecture/database/#fetch-towers-and-their-slots-for-a-farm","title":"Fetch towers and their slots for a farm","text":"<pre><code>SELECT T.id AS tower_id, S.id AS slot_id, S.crop\nFROM Tower T\nLEFT JOIN Slot S ON T.id = S.tower_id\nWHERE T.farm_id = 1;\n</code></pre>"},{"location":"architecture/database/#fetch-all-online-devices-in-a-farm","title":"Fetch all online devices in a farm","text":"<pre><code>SELECT *\nFROM Device\nWHERE farm_id = 1 AND status = 'ONLINE';\n</code></pre>"},{"location":"architecture/database/#insert-a-new-device","title":"Insert a new device","text":"<pre><code>INSERT INTO Device (tower_id, farm_id, slot_id, device_type, status, value, unit, installation_date)\nVALUES (1, 1, 1, 'TOWER', 'ONLINE', 100, 'Celsius', '2024-01-01');\n</code></pre>"},{"location":"architecture/database/#interactions-between-dockerized-services-and-the-database","title":"Interactions Between Dockerized Services and the Database","text":""},{"location":"architecture/database/#dockerized-mysql-database","title":"Dockerized MySQL Database","text":"<ul> <li>Use a Dockerized MySQL instance with the <code>MYSQL_ROOT_PASSWORD</code> set.</li> </ul>"},{"location":"architecture/database/#example-docker-composeyml-snippet","title":"Example <code>docker-compose.yml</code> Snippet","text":"<pre><code>services:\n  db:\n    image: mysql:latest\n    environment:\n      MYSQL_ROOT_PASSWORD: secret\n    ports:\n      - \"3306:3306\"\n    networks:\n      - app-network\n\n  app:\n    build: .\n    environment:\n      DATABASE_URL: mysql://root:secret@db:3306/mydatabase\n    networks:\n      - app-network\n\nnetworks:\n  app-network:\n</code></pre>"},{"location":"architecture/database/#redis-for-caching","title":"Redis for Caching","text":"<ul> <li>Add caching for frequently accessed queries to improve performance.</li> </ul> <p>Let me know if further refinements or additions are needed!</p>"},{"location":"architecture/overview/","title":"Gaia's Cycle Architecture Overview","text":""},{"location":"architecture/overview/#architecture-diagram","title":"Architecture Diagram","text":"<p>Below is the simplified architecture diagram of the Gaia's Cycle project, which uses color coding to represent different components and their relationships. </p> <p>The diagram above illustrates the core components of the Gaia's Cycle project and their relationships.</p> <pre><code>sequenceDiagram\n    Users[Users] --&gt; Frontend[Frontend (Bootstrap)]\n     Frontend --&gt; Backend[Backend (FastAPI, SQLAlchemy, Pydantic)]\n    Backend --&gt; MySQL[MySQL Database]\n    Backend --&gt; Kafka[Kafka]\n    Backend --&gt; Ngrok[Ngrok]\n    Backend --&gt; Docker[Docker]\n    Backend --&gt; APIGateway[API Gateway (FastAPI)]\n    Kafka --&gt; EventBus[Event Bus (Kafka)]\n    EventBus --&gt; DataLake[Data Lake (S3)]\n    APIGateway --&gt; DataLake\n    MySQL --&gt; DataLake\n    Backend --&gt; Authentication[User Authentication (Passlib)]\n</code></pre>"},{"location":"architecture/overview/#legend","title":"Legend:","text":"<ul> <li>Frontend: Green</li> <li>Backend: Blue</li> <li>Database: Red</li> <li>Messaging: Yellow</li> <li>API &amp; Gateway: Gray</li> <li>Others: Pink</li> </ul>"},{"location":"architecture/overview/#key-components-and-their-relationships","title":"Key Components and Their Relationships","text":"<ul> <li>Frontend: Built with Bootstrap for a responsive UI, interacting with the Backend via API calls.</li> <li>Backend: Powered by FastAPI, SQLAlchemy, and Pydantic for efficient database interactions, schema validation, and API management.</li> <li>MySQL Database: Stores user, farm, tower, device, and slot data.</li> <li>Kafka: Handles event streaming and message queuing between services.</li> <li>Ngrok: Provides secure tunnels for local development and testing.</li> <li>Docker: Used to containerize the application and ensure environment consistency.</li> <li>API Gateway: FastAPI manages all API requests and responses.</li> <li>Event Bus: Kafka handles asynchronous events between services.</li> <li>Data Lake (S3): Stores large datasets, including logs, sensor data, and analytics results.</li> <li>User Authentication: Managed with Passlib for secure password hashing and authentication.</li> </ul> <p>The system is designed to be modular and scalable, allowing for future enhancements and integrations.</p>"},{"location":"architecture/overview/#app-flow","title":"App Flow","text":""},{"location":"architecture/overview/#1-user-interaction-with-the-frontend","title":"1. User Interaction with the Frontend","text":"<ul> <li>Users interact with the frontend through a responsive web interface.</li> <li>The frontend displays live data, such as crop statuses and sensor readings, and allows users to make decisions based on this information (e.g., adjusting irrigation or adding new crops).</li> <li>When a user submits a request (e.g., updating crop information), it is sent to the backend via API calls.</li> </ul>"},{"location":"architecture/overview/#2-backend-processing","title":"2. Backend Processing","text":"<ul> <li>The backend receives the request from the frontend and processes the necessary business logic (e.g., validating input, calculating crop yield predictions).</li> <li>It communicates with the database to query or update information (e.g., adding new crop data or updating sensor readings).</li> <li>Any real-time sensor data is handled asynchronously, utilizing Kafka to manage the data streams and ensure non-blocking operations.</li> <li>After processing, the backend sends the appropriate response back to the frontend.</li> </ul>"},{"location":"architecture/overview/#3-database-operations","title":"3. Database Operations","text":"<ul> <li>The backend queries or updates the MySQL database for any relevant information (e.g., checking available crop slots or saving new crop data).</li> <li>Data retrieval is optimized for speed and accuracy, and relational queries are used to fetch related information, such as crop status, sensor data, and user information.</li> </ul> <p>This architecture ensures that the system is both efficient and scalable, with separate components handling different responsibilities and third-party services augmenting the functionality.</p>"},{"location":"architecture/sequence-diagrams/","title":"Sequence Diagrams","text":"<p># Sequence Diagrams</p>"},{"location":"architecture/sequence-diagrams/#user-login-and-authentication","title":"User Login and Authentication","text":""},{"location":"architecture/sequence-diagrams/#data-retrieval-eg-stats-fetching","title":"Data Retrieval (e.g., Stats Fetching)","text":""},{"location":"components/backend/","title":"Backend Components","text":""},{"location":"components/backend/#backend-documentation","title":"Backend Documentation","text":""},{"location":"components/backend/#backend-architecture-and-responsibilities","title":"Backend Architecture and Responsibilities","text":""},{"location":"components/backend/#overview","title":"Overview","text":"<p>The backend is designed to: - Handle API requests from the frontend and external systems. - Manage business logic for user, farm, tower, device, and slot functionalities. - Interact with the database to perform CRUD operations. - Provide secure and scalable services. - Integrate with third-party tools like Redis for caching and Docker for containerization.</p>"},{"location":"components/backend/#architecture","title":"Architecture","text":"<ul> <li>Layered Architecture:<ul> <li>Presentation Layer: Exposes RESTful APIs.</li> <li>Service Layer: Contains business logic and validation.</li> <li>Data Access Layer: Handles interactions with the database.</li> </ul> </li> <li>Technologies:<ul> <li>Python (FastAPI framework)</li> <li>MySQL database</li> <li>Docker for containerization</li> <li>Redis for caching frequently accessed data</li> </ul> </li> </ul>"},{"location":"components/backend/#key-responsibilities","title":"Key Responsibilities","text":"<ol> <li>User Management:<ul> <li>Registration and authentication.</li> <li>Fetch user data by ID or username.</li> </ul> </li> <li>Farm and Tower Management:<ul> <li>CRUD operations for farms and towers.</li> </ul> </li> <li>Device Monitoring:<ul> <li>Storing and retrieving device information.</li> <li>Managing device status (online/offline).</li> </ul> </li> <li>Slot Tracking:<ul> <li>Monitoring crop and harvest details.</li> </ul> </li> </ol>"},{"location":"components/backend/#frameworks-and-libraries-used","title":"Frameworks and Libraries Used","text":""},{"location":"components/backend/#core-backend-framework","title":"Core Backend Framework","text":"<ul> <li>FastAPI:<ul> <li>Provides asynchronous API handling.</li> <li>Built-in data validation with Pydantic.</li> </ul> </li> </ul>"},{"location":"components/backend/#database","title":"Database","text":"<ul> <li>SQLAlchemy (with AsyncSession):<ul> <li>ORM for database operations.</li> <li>Support for MySQL.</li> </ul> </li> </ul>"},{"location":"components/backend/#caching","title":"Caching","text":"<ul> <li>Redis:<ul> <li>Used for caching frequently accessed data.</li> </ul> </li> </ul>"},{"location":"components/backend/#containerization","title":"Containerization","text":"<ul> <li>Docker:<ul> <li>Provides containerized environment for the application and MySQL database.</li> </ul> </li> </ul>"},{"location":"components/backend/#additional-libraries","title":"Additional Libraries","text":"<ul> <li>Pydantic:<ul> <li>Schema definitions and data validation.</li> </ul> </li> <li>Enum:<ul> <li>Defines constants like device status and type.</li> </ul> </li> <li>Datetime:<ul> <li>Handles date and time operations.</li> </ul> </li> </ul>"},{"location":"components/backend/#apis-exposed-by-the-backend","title":"APIs Exposed by the Backend","text":""},{"location":"components/backend/#user-apis","title":"User APIs","text":"<ul> <li><code>POST /api/user</code>:<ul> <li>Create a new user.</li> <li>Request Body: <code>UserCreate</code> object</li> <li>Response: <code>UserRead</code> object</li> </ul> </li> <li><code>GET /api/user/{user_id}</code>:<ul> <li>Fetch user by ID.</li> <li>Path Parameter: <code>user_id</code> (integer)</li> <li>Response: <code>UserRead</code> object</li> </ul> </li> <li><code>GET /api/user/username/{username}</code>:<ul> <li>Fetch user by username.</li> <li>Path Parameter: <code>username</code> (string)</li> <li>Response: <code>UserRead</code> object</li> </ul> </li> </ul>"},{"location":"components/backend/#farm-apis","title":"Farm APIs","text":"<ul> <li><code>POST /api/farm</code>:<ul> <li>Create a new farm.</li> <li>Request Body: <code>FarmCreate</code> object</li> <li>Response: <code>FarmRead</code> object</li> </ul> </li> <li><code>GET /api/farm</code>:<ul> <li>Fetch all farms.</li> <li>Response: List of <code>FarmRead</code> objects</li> </ul> </li> <li><code>GET /api/farm/{farm_id}</code>:<ul> <li>Fetch farm by ID.</li> <li>Path Parameter: <code>farm_id</code> (integer)</li> <li>Response: <code>FarmRead</code> object</li> </ul> </li> </ul>"},{"location":"components/backend/#tower-apis","title":"Tower APIs","text":"<ul> <li><code>POST /api/tower</code>:<ul> <li>Create a new tower.</li> <li>Request Body: <code>TowerCreate</code> object</li> <li>Response: <code>TowerRead</code> object</li> </ul> </li> <li><code>GET /api/tower</code>:<ul> <li>Fetch all towers.</li> <li>Response: List of <code>TowerRead</code> objects</li> </ul> </li> <li><code>GET /api/tower/{tower_id}</code>:<ul> <li>Fetch tower by ID.</li> <li>Path Parameter: <code>tower_id</code> (integer)</li> <li>Response: <code>TowerRead</code> object</li> </ul> </li> </ul>"},{"location":"components/backend/#device-apis","title":"Device APIs","text":"<ul> <li><code>POST /api/device</code>:<ul> <li>Create a new device.</li> <li>Request Body: <code>DeviceCreate</code> object</li> <li>Response: <code>DeviceRead</code> object</li> </ul> </li> <li><code>GET /api/device</code>:<ul> <li>Fetch all devices.</li> <li>Response: List of <code>DeviceRead</code> objects</li> </ul> </li> <li><code>GET /api/device/{device_id}</code>:<ul> <li>Fetch device by ID.</li> <li>Path Parameter: <code>device_id</code> (integer)</li> <li>Response: <code>DeviceRead</code> object</li> </ul> </li> </ul>"},{"location":"components/backend/#slot-apis","title":"Slot APIs","text":"<ul> <li><code>POST /api/slot</code>:<ul> <li>Create a new slot.</li> <li>Request Body: <code>SlotCreate</code> object</li> <li>Response: <code>SlotRead</code> object</li> </ul> </li> <li><code>GET /api/slot</code>:<ul> <li>Fetch all slots.</li> <li>Response: List of <code>SlotRead</code> objects</li> </ul> </li> <li><code>GET /api/slot/{slot_id}</code>:<ul> <li>Fetch slot by ID.</li> <li>Path Parameter: <code>slot_id</code> (integer)</li> <li>Response: <code>SlotRead</code> object</li> </ul> </li> </ul>"},{"location":"components/building-blocks/","title":"Building Blocks","text":"<p>The GaiaCycle project is structured around key components and reusable functionalities to ensure maintainability and scalability. This section outlines the building blocks of the application.</p>"},{"location":"components/building-blocks/#1-core-components","title":"1. Core Components","text":""},{"location":"components/building-blocks/#database","title":"Database","text":"<ul> <li>The database serves as the backbone of GaiaCycle, storing user data, plant growth records, and feedback submissions.</li> <li>Technology: PostgreSQL is used for its robustness and compatibility with Django.</li> <li>Schema:</li> <li>Users table: Stores user profile information.</li> <li>Plants table: Records details about plant species, growth rates, and associated metrics.</li> <li>Feedback table: Stores feedback and contact form submissions.</li> </ul>"},{"location":"components/building-blocks/#frontend","title":"Frontend","text":"<ul> <li>Developed using HTML, CSS, and Bootstrap for responsive design.</li> <li>Key features include:</li> <li>Navigation bar for accessing pages such as Home, Maps, and Contact Us.</li> <li>Interactive forms for data input and feedback submission.</li> <li>Tutorial page designed for user guidance.</li> </ul>"},{"location":"components/building-blocks/#backend","title":"Backend","text":"<ul> <li>Built with Django, providing a strong framework for routing, database interaction, and form handling.</li> <li>Handles user requests, manages business logic, and ensures secure communication between the frontend and the database.</li> </ul>"},{"location":"components/building-blocks/#2-reusable-components","title":"2. Reusable Components","text":"<ul> <li>Reusable Functions:</li> <li><code>send_email_notification</code>: Sends confirmation emails to users after form submissions.</li> <li><code>calculate_growth_rate</code>: Computes plant growth based on input environmental data.</li> <li>UI Components:</li> <li>Modular form templates for input validation (e.g., feedback form).</li> <li>Bootstrap-based reusable buttons (e.g., Back to Top button).</li> <li>CSS and JavaScript:</li> <li>Shared stylesheets for consistent branding across pages.</li> <li>Common JavaScript utilities for client-side validation.</li> </ul>"},{"location":"components/building-blocks/#3-dependencies","title":"3. Dependencies","text":""},{"location":"components/building-blocks/#external-libraries-and-tools","title":"External Libraries and Tools","text":"<ul> <li>Bootstrap: For responsive design and UI components.</li> <li>FontAwesome: For icons and visual enhancements.</li> <li>Django: As the web framework for backend development.</li> <li>PostgreSQL: Database management system.</li> <li>Favicon: Integrated for a professional touch across all pages.</li> <li>Testing Tools: Pytest for unit testing backend logic.</li> </ul>"},{"location":"components/building-blocks/#integration","title":"Integration","text":"<ul> <li>External APIs for advanced features (e.g., Google Maps API for the Maps page).</li> <li>CDN-hosted resources for Bootstrap and FontAwesome.</li> </ul>"},{"location":"components/building-blocks/#4-testing-and-quality","title":"4. Testing and Quality","text":""},{"location":"components/building-blocks/#testing-guidelines","title":"Testing Guidelines","text":"<ul> <li>Write unit tests for critical backend functions, such as:</li> <li>Database interactions.</li> <li>Form validation logic.</li> <li>Email notification system.</li> <li>Use Django\u2019s built-in testing framework for comprehensive coverage.</li> </ul>"},{"location":"components/building-blocks/#quality-assurance","title":"Quality Assurance","text":"<ul> <li>Peer reviews for all new modules or major updates.</li> <li>Regular code audits to ensure adherence to coding standards.</li> <li>Continuous integration tools (e.g., GitHub Actions) to run automated tests on every pull request.</li> </ul>"},{"location":"components/building-blocks/#example-test-case","title":"Example Test Case","text":"<p>```python def test_calculate_growth_rate():     soil_moisture = 50     light_exposure = 8     expected_rate = (soil_moisture * 0.4) + (light_exposure * 0.6)     assert calculate_growth_rate(soil_moisture, light_exposure) == expected_rate</p>"},{"location":"components/frontend/","title":"Frontend Components","text":""},{"location":"components/frontend/#overview","title":"Overview","text":"<p>In this project, we leveraged multiple technologies to build an efficient and responsive frontend, integrating Jinja2, Uvicorn, Bootstrap, and FontAwesome icons. These tools enabled us to create dynamic, user-friendly web pages while ensuring scalability and maintainability.</p>"},{"location":"components/frontend/#uvicorn","title":"Uvicorn","text":"<p>Uvicorn, an ASGI server, was used to serve the application. It efficiently handles asynchronous requests, ensuring high performance when rendering frontend content. Uvicorn allows FastAPI to serve HTML templates and static content like CSS and JS to the user.</p>"},{"location":"components/frontend/#jinja2","title":"Jinja2","text":"<p>For rendering dynamic HTML pages, Jinja2 was integrated into FastAPI to generate templates. Jinja2 provided a flexible way to pass Python variables into HTML files, allowing us to render dynamic content such as user inputs, data from the backend, and templates with reusable components. This enabled a clean separation of concerns, ensuring that logic and presentation were maintained separately.</p>"},{"location":"components/frontend/#bootstrap","title":"Bootstrap","text":"<p>We used Bootstrap, a popular CSS framework, to quickly develop a responsive and modern frontend design. Bootstrap\u2019s grid system allowed us to create a flexible layout for various screen sizes, while its built-in components such as buttons, navigation bars, and forms improved the overall user experience. Bootstrap\u2019s pre-defined styles significantly reduced the development time and helped us maintain consistency across the web pages.</p>"},{"location":"components/frontend/#fontawesome-icons","title":"FontAwesome Icons","text":"<p>To enhance the visual appeal and provide intuitive iconography, we incorporated FontAwesome icons. FontAwesome icons were used for various UI components, including buttons, navigation items, and content sections. They allowed us to visually communicate actions and features, improving accessibility and user experience.</p>"},{"location":"components/third-party-integrations/","title":"Third-Party Integrations","text":""},{"location":"deployment/docker-setup/","title":"Docker Setup","text":"<p>this project requires a mysql database to run, you can set one up by running the following commands on a terminal</p> <ul> <li>get the mysql image from the repository</li> </ul> <p><pre><code>docker pull mysql\n</code></pre> - run the container and set the password to \"secret\"</p> <p><pre><code>docker run --name gaiascycle_db -e MYSQL_ROOT_PASSWORD=secret -d mysql:latest\n</code></pre> - then from the container's terminal, create the following database</p> <pre><code>docker exec -it gaiascycle_db sh\n</code></pre> <ul> <li>once inside the container, access mysql by running the following command and inputting \"secret\" as the password <pre><code>mysql\n</code></pre></li> <li>the last step will be to create the database</li> </ul> <p>``` CREATE DATABASE gaiascycle;</p>"},{"location":"deployment/environment-variables/","title":"Environment Variables","text":""},{"location":"deployment/production-deployment/","title":"Production Deployment","text":""},{"location":"development/coding-standards/","title":"Coding Standards","text":"<p>To ensure consistent, maintainable, and high-quality code for the GaiaCycle project, the following coding standards and best practices must be adhered to:</p>"},{"location":"development/coding-standards/#1-naming-conventions","title":"1. Naming Conventions","text":"<ul> <li>Variables:</li> <li>Use descriptive and meaningful names that reflect GaiaCycle's domain (e.g., <code>user_feedback</code> or <code>vegetable_data</code>).</li> <li>Use snake_case for variable names (e.g., <code>plant_growth_rate</code>).</li> <li>Functions:</li> <li>Name functions in snake_case, starting with a verb to indicate action (e.g., <code>fetch_user_feedback</code>, <code>calculate_water_usage</code>).</li> <li>Classes:</li> <li>Use PascalCase for class names (e.g., <code>UserProfile</code>, <code>PlantGrowthManager</code>).</li> <li>Constants:</li> <li>Use UPPERCASE with underscores for constants (e.g., <code>MAX_PLANT_CAPACITY</code>, <code>DEFAULT_GROWTH_RATE</code>).</li> </ul>"},{"location":"development/coding-standards/#2-code-formatting","title":"2. Code Formatting","text":"<ul> <li>Indentation: Use 4 spaces per indentation level for Python files and maintain consistent structure across all web development files.</li> <li>Line Length: Limit lines to 80 characters for Python and ensure a clear structure in HTML/CSS.</li> <li>Spacing:</li> <li>Ensure proper alignment of Bootstrap components for UI consistency.</li> <li>Maintain readable spacing in <code>.css</code> and <code>.js</code> files for smoother debugging.</li> </ul>"},{"location":"development/coding-standards/#3-commenting-and-documentation","title":"3. Commenting and Documentation","text":"<ul> <li>Comments:</li> <li>Provide comments to explain logic in modules like <code>contactUs</code> or <code>plantMonitoring</code>.</li> <li>Document any calculations or unique algorithmic implementations specific to GaiaCycle (e.g., soil moisture prediction).</li> <li>Docstrings:</li> <li>Use docstrings for all public-facing Python functions and methods.</li> <li>Example for GaiaCycle:     <pre><code>def calculate_growth_rate(soil_moisture, light_exposure):\n    \"\"\"\n    Calculate the growth rate of a plant based on environmental factors.\n\n    Args:\n        soil_moisture (float): Percentage of moisture in the soil.\n        light_exposure (int): Hours of sunlight exposure.\n\n    Returns:\n        float: Estimated growth rate per day.\n    \"\"\"\n    return (soil_moisture * 0.4) + (light_exposure * 0.6)\n</code></pre></li> </ul>"},{"location":"development/coding-standards/#4-error-handling","title":"4. Error Handling","text":"<ul> <li>Handle errors gracefully in user input forms like the Contact Us and Feedback pages.</li> <li>Validate and sanitize all user-provided data before saving to the database.</li> <li>Use clear error messages for user-facing issues (e.g., \"Invalid email address format\" or \"Database connection failed\").</li> <li>Example for GaiaCycle backend:   ```python   try:       db_connection = connect_to_database()   except ConnectionError as e:       print(f\"Database Error: {e}\")       log_error(e)</li> </ul>"},{"location":"development/git-workflow/","title":"Git Workflow","text":""},{"location":"development/testing/","title":"Testing Guidelines","text":""},{"location":"development/testing/#1-types-of-tests","title":"1. Types of Tests","text":""},{"location":"development/testing/#unit-testing","title":"Unit Testing","text":"<p>Unit tests focus on testing individual components in isolation. These tests ensure that each part of the application works as expected. For instance, testing backend API endpoints, user authentication logic, or database interactions.</p>"},{"location":"development/testing/#integration-testing","title":"Integration Testing","text":"<p>Integration tests check the interaction between different components of the system. This includes validating that the backend communicates correctly with the database, and that API calls return the expected results when integrated with other services.</p>"},{"location":"development/testing/#end-to-end-testing","title":"End-to-End Testing","text":"<p>End-to-end tests simulate real-world user interactions with the entire system. These tests ensure that the complete user journey works smoothly, from the frontend interface to the backend and database.</p>"},{"location":"development/testing/#performance-testing","title":"Performance Testing","text":"<p>Performance tests validate that the application can handle expected loads and perform efficiently under stress. This involves checking response times and system behavior under heavy traffic.</p>"},{"location":"development/testing/#security-testing","title":"Security Testing","text":"<p>Security tests are designed to identify vulnerabilities within the system. They verify that sensitive data is protected, and the application is resistant to common security threats such as SQL injection, cross-site scripting (XSS), and cross-site request forgery (CSRF).</p>"},{"location":"development/testing/#2-frameworks-and-tools","title":"2. Frameworks and Tools","text":"<p>The following frameworks and tools are used for different types of testing:</p>"},{"location":"development/testing/#unit-testing-frameworks","title":"Unit Testing Frameworks:","text":"<ul> <li>pytest: A robust testing framework for Python, which is easy to use and integrates well with other tools.</li> <li>unittest: Python's built-in testing module, used for unit testing.</li> </ul>"},{"location":"development/testing/#integration-testing-frameworks","title":"Integration Testing Frameworks:","text":"<ul> <li>Postman: Used to test RESTful APIs. It allows you to send HTTP requests and validate responses, making it ideal for integration testing of backend services.</li> <li>pytest: Also used for integration testing, especially with custom test suites for backend API interactions.</li> </ul>"},{"location":"development/testing/#end-to-end-testing-frameworks","title":"End-to-End Testing Frameworks:","text":"<ul> <li>Selenium: An automated web testing framework that interacts with browsers to simulate user actions.</li> </ul>"},{"location":"development/testing/#performance-testing-tools","title":"Performance Testing Tools:","text":"<ul> <li>JMeter: A tool for load testing and performance benchmarking, useful to simulate heavy traffic and validate system responsiveness.</li> <li>Locust: A Python-based tool that allows you to define user behavior and test how the system handles concurrent requests.</li> </ul>"},{"location":"development/testing/#security-testing-tools","title":"Security Testing Tools:","text":"<ul> <li>OWASP ZAP: A security testing tool that scans the application for vulnerabilities, including common OWASP threats.</li> <li>Burp Suite: A powerful tool for identifying and mitigating security issues within web applications.</li> </ul>"},{"location":"development/testing/#3-steps-to-run-tests-locally","title":"3. Steps to Run Tests Locally","text":""},{"location":"development/testing/#setting-up-the-environment","title":"Setting Up the Environment","text":"<ol> <li> <p>Install Dependencies:    First, make sure that all necessary dependencies for testing are installed. Run the following command to install the required packages:    <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Set Up the Local Database (for integration tests):    Since we're using a local database for testing, ensure that it's set up properly. We are using MySQL locally. Ensure that your local database is running and accessible for tests.(MySQL container from Docker)</p> </li> </ol> <p>You can also use test-specific databases for testing purposes, ensuring that your development database isn't affected by test data.</p> <p>Make sure your local database connection is properly configured in your <code>.env</code> file or environment variables:    <pre><code>export DATABASE_URL=your_local_database_url\nexport API_KEY=your_api_key\n</code></pre></p> <ol> <li> <p>Environment Variables:    Some tests may require specific environment variables. Set them as needed, either in a <code>.env</code> file or through your system settings. For example:    <pre><code>export DATABASE_URL=your_local_database_url\nexport API_KEY=your_api_key\n</code></pre></p> </li> <li> <p>Configure Test Settings:    Some tests may require mock services or certain configurations. Ensure that any mock services are set up (e.g., mock databases, APIs) and the appropriate test configuration is applied.</p> </li> </ol>"},{"location":"development/testing/#running-unit-tests","title":"Running Unit Tests","text":"<p>To run the unit tests, use the following command: <pre><code>pytest tests/unit/\n</code></pre> You can specify additional options such as <code>--maxfail=1</code> to stop after the first failure: <pre><code>pytest --maxfail=1 tests/unit/\n</code></pre></p>"},{"location":"development/testing/#running-integration-tests","title":"Running Integration Tests","text":"<p>For integration tests: - Postman: Import the collection for integration tests and click \"Run\" to execute them. - pytest: If running integration tests via <code>pytest</code>, use:   <pre><code>pytest tests/integration/\n</code></pre></p>"},{"location":"development/testing/#running-end-to-end-tests","title":"Running End-to-End Tests","text":"<p>For end-to-end testing with Selenium or Cypress: - Selenium: Ensure that the browser driver (e.g., ChromeDriver) is installed. Then run the tests:   <pre><code>pytest tests/e2e/\n</code></pre></p>"},{"location":"development/testing/#running-performance-tests","title":"Running Performance Tests","text":"<p>To run performance tests with Locust or JMeter: - Locust: Run Locust for load testing:   <pre><code>locust -f tests/performance/test_script.py\n</code></pre></p> <ul> <li>JMeter: Import the JMeter test plan and run it from the JMeter interface.</li> </ul>"},{"location":"development/testing/#running-security-tests","title":"Running Security Tests","text":"<p>For security tests: - OWASP ZAP: Start OWASP ZAP and configure the target application URL. Run automated security scans. - Burp Suite: Use Burp Suite to scan for vulnerabilities in the application.</p>"},{"location":"development/testing/#additional-notes","title":"Additional Notes:","text":"<ul> <li>Test Coverage: Aim to have high test coverage by writing tests for the core components of your application.</li> <li>CI/CD Integration: Ensure that tests are integrated into your continuous integration (CI) pipeline, so tests run automatically on each commit.</li> </ul>"},{"location":"features/AI-analysis/","title":"AI Analysis Features","text":""},{"location":"features/admin-pages/","title":"Dashboard Page Overview","text":"<p>The dashboard serves as a centralized hub, offering users an intuitive way to navigate the web app and monitor key functionalities. This guide outlines the layout, features, and purpose of the dashboard page.</p> <p>The dashboard page is designed to streamline user interaction, providing quick access to critical metrics, data visualizations, and tools to enhance usability.</p>"},{"location":"features/admin-pages/#pages-and-their-purpose","title":"Pages and Their Purpose","text":"<ul> <li> <p>Dashboard Overview:   This section highlights key metrics such as total devices, active farms, and power usage. Visual data representations (e.g., graphs) provide a snapshot of system performance.</p> </li> <li> <p>Statistics Page:   Focuses on detailed analytics, offering insights into system trends, user activity, and energy consumption. Interactive graphs and filters enable users to explore data across different time frames.</p> </li> <li> <p>Settings:   A customizable area where users can configure account preferences, manage notifications, and adjust system parameters.</p> </li> <li> <p>Inventory Management:   Users can view, categorize, and track all devices, farms, and towers in the system. This page includes search functionality for efficient navigation.</p> </li> </ul>"},{"location":"features/admin-pages/#features-and-functionalities","title":"Features and Functionalities","text":""},{"location":"features/admin-pages/#key-metrics-overview","title":"Key Metrics Overview","text":"<p>The top section of the dashboard displays quick statistics: - Total number of devices connected. - Active farms currently operational. - Current power usage and trends over time.</p>"},{"location":"features/admin-pages/#interactive-graphs","title":"Interactive Graphs","text":"<p>The dashboard integrates dynamic graphs that update in real-time, showing: - Daily, weekly, and monthly trends in system performance. - Comparisons of power consumption across farms.</p>"},{"location":"features/admin-pages/#collapsible-insights-table","title":"Collapsible Insights Table","text":"<p>Users can toggle a detailed metrics table for an in-depth breakdown of performance statistics.</p>"},{"location":"features/admin-pages/#stats-page","title":"Stats Page","text":"<p>The Statistics Page complements the dashboard by focusing on data visualization and in-depth analysis.</p>"},{"location":"features/admin-pages/#features","title":"Features:","text":"<ol> <li>Graphs: Visual representations of data trends with options to filter by day, week, or month.</li> <li>Data Overview: A table that allows users to grasp a general idea of the data over their farm.  </li> </ol>"},{"location":"features/map-and-search/","title":"Map and Search","text":""},{"location":"features/ui/","title":"UI Overview","text":"<p>This page outlines the design principles and components used to build the app\u2019s user interface.</p>"},{"location":"features/ui/#components","title":"Components","text":"<p>The following components make up the Gaia's Cycle UI:</p> <ol> <li>Header:</li> <li>Present at the top of every page.</li> <li>Includes the app logo, navigation links (Home, Dashboard, Stats), and a user profile dropdown.</li> <li> <p>Behavior: Stays fixed for easy access during scrolling.</p> </li> <li> <p>Footer:</p> </li> <li>Located at the bottom of every page.</li> <li>Contains links to the Privacy Policy, Terms of Service, Contact Us, and social media channels.</li> <li> <p>Minimalistic design to avoid visual clutter.</p> </li> <li> <p>Buttons:</p> </li> <li>Primary Buttons: Used for main actions like \"Submit\" or \"Save.\" Styled with the app\u2019s accent color for emphasis.</li> <li>Secondary Buttons: Used for auxiliary actions like \"Cancel\" or \"Back.\" Styled in neutral tones.</li> <li> <p>Interactive states (hover, focus, and active) provide immediate feedback to users.</p> </li> <li> <p>Forms:</p> </li> <li>Inputs include text fields, dropdowns, checkboxes, and radio buttons.</li> <li>Designed with clear labels, placeholders, and tooltips for guidance.</li> <li>Validation messages appear inline to assist users in correcting errors promptly.</li> </ol>"},{"location":"features/ui/#ui-design-principles","title":"UI Design Principles","text":"<ol> <li>Consistency:</li> <li>Uniform styling for components (buttons, fonts, colors) across all pages.</li> <li> <p>Consistent placement of navigation elements and action buttons to reduce confusion.</p> </li> <li> <p>Responsiveness:</p> </li> <li>The UI adapts fluidly to various screen sizes and orientations.</li> <li> <p>Uses flexible grids and scalable typography to ensure usability on desktops, tablets, and mobile devices.</p> </li> <li> <p>Accessibility:</p> </li> <li>Adheres to WCAG (Web Content Accessibility Guidelines) standards.</li> <li>Includes proper color contrast, alternative text for images, and support for screen readers.</li> <li>Keyboard navigation enabled for key actions.</li> </ol>"},{"location":"features/ui/#ui-journey","title":"UI Journey","text":"<p>The following diagram illustrates the user's journey through the UI components:</p> <p></p>"},{"location":"features/user-pages/","title":"General Pages Overview","text":"<p>This section describes the general pages of the web app and their purposes. Each page is designed to provide users with essential information and access to basic functions.</p>"},{"location":"features/user-pages/#home-page","title":"Home Page","text":""},{"location":"features/user-pages/#purpose","title":"Purpose","text":"<p>The Home Page serves as the central entry point for users. It provides an overview of Gaia's Cycle, offering easy access to key features and important updates. This page is designed to help users quickly navigate the app and begin their journey with Gaia's Cycle, whether they are new users or returning ones.</p>"},{"location":"features/user-pages/#layout","title":"Layout","text":"<p>The Home Page is divided into the following sections:</p> <ol> <li>Navigation Bar: </li> <li>Located at the top, the navigation bar provides links to essential pages like the Dashboard, Stats, Settings, and Profile.</li> <li> <p>Includes the Gaia's Cycle logo, which, when clicked, redirects users to the homepage from any section of the app.</p> </li> <li> <p>Welcome Message:</p> </li> <li>A brief, friendly introduction to Gaia's Cycle, explaining the core mission of sustainable urban farming and encouraging users to engage with the app.</li> <li> <p>Includes a call-to-action (CTA) button prompting users to sign up or log in if they haven't already.</p> </li> <li> <p>Key Features Overview:</p> </li> <li>A visually appealing section that briefly highlights the app's primary features, such as:<ul> <li>Waste Tracking: Monitor recyclable and organic waste.</li> <li>Sustainability Insights: View data-driven insights and tips for a greener lifestyle.</li> <li>Personal Stats: Track your progress and contributions to sustainability.</li> </ul> </li> <li> <p>Each feature includes a link to a more detailed page with further information.</p> </li> <li> <p>Updates/News:</p> </li> <li> <p>A section dedicated to displaying recent news, announcements, or sustainability tips. This keeps users informed on the latest developments, updates to the app, or community-driven initiatives.</p> </li> <li> <p>Footer:</p> </li> <li>Contains links to the Privacy Policy, Terms of Service, Support, and Social Media channels. It ensures that users have easy access to essential legal and support pages.</li> </ol>"},{"location":"features/user-pages/#functionality","title":"Functionality","text":"<p>The following interactions are available on the Home Page:</p> <ol> <li>Sign Up / Login:</li> <li> <p>New users can sign up directly from the homepage, while existing users can log in using a prominent button. Once logged in, users gain access to personalized features like stats tracking, dashboard, and settings.</p> </li> <li> <p>Quick Access to Features:</p> </li> <li> <p>Users can click on any of the feature links (e.g., Stats, Dashboard, etc.) to be directed to relevant pages where they can perform tasks and view detailed data.</p> </li> <li> <p>Announcements:</p> </li> <li> <p>The Updates/News section allows the admin or the app to post important messages. This section is dynamic and can change based on new updates or user engagement campaigns.</p> </li> <li> <p>Responsive Design:</p> </li> <li>The Home Page is designed to be fully responsive, ensuring a smooth experience whether accessed on a desktop, tablet, or smartphone.</li> </ol>"},{"location":"features/user-pages/#user-interaction","title":"User Interaction","text":"<ul> <li>Navigation: Clicking the navigation bar links directs users to the corresponding sections, such as Dashboard or Stats.</li> <li>Call-to-Action Button: Users who are new to Gaia's Cycle can click the sign-up button, while logged-in users can access their dashboard, stats, or settings.</li> <li>Updates Section: Users can read through news or updates about Gaia's Cycle, helping them stay informed about new features and sustainability initiatives.</li> </ul>"},{"location":"features/user-pages/#visual-layout","title":"Visual Layout","text":"<p>The Home Page uses a clean, modern design that prioritizes accessibility and simplicity. Sections are clearly separated for easy navigation, and key information is highlighted with visuals such as icons and charts. The layout adapts seamlessly to various screen sizes, ensuring a consistent experience across devices.</p>"},{"location":"features/user-pages/#confirmed-sections-and-key-features","title":"Confirmed Sections and Key Features:","text":"<ol> <li>Navigation Bar: Links to Dashboard, Stats, Settings, and Profile. Includes Gaia's Cycle logo for easy navigation.</li> <li>Welcome Message: A friendly introduction with a clear CTA to sign up or log in.</li> <li>Key Features Overview: Highlights waste tracking, sustainability insights, and personal stats with linked details.</li> <li>Updates/News Section: Dynamic section displaying relevant updates, news, or tips.</li> <li>Footer: Includes links to Privacy Policy, Terms of Service, Support, and Social Media channels.</li> </ol> <p>This structure ensures that users have a welcoming, informative, and easy-to-navigate homepage, providing all the essentials to get started with Gaia's Cycle.</p>"},{"location":"features/user-pages/#contact-us-page","title":"Contact Us Page","text":""},{"location":"features/user-pages/#purpose_1","title":"Purpose","text":"<p>The Contact Us page provides a direct communication channel between users and the Gaia's Cycle team. It enables users to ask questions, share feedback, or report issues, fostering trust and engagement.</p>"},{"location":"features/user-pages/#layout_1","title":"Layout","text":"<ol> <li>Header Section:</li> <li> <p>Includes the page title (Contact Us) and a brief description of its purpose, such as \"We\u2019re here to assist you with any questions or feedback.\"</p> </li> <li> <p>Contact Form:</p> </li> <li>Name Field: A text input for users to enter their full name.</li> <li>Email Field: Ensures users provide a valid email address for follow-ups.</li> <li>Subject Field: Allows users to specify the reason for their message.</li> <li>Message Box: A large text area for detailed inquiries or feedback.</li> <li> <p>Submit Button: Sends the completed form for processing.</p> </li> <li> <p>Support Information:</p> </li> <li>A support email address and phone number for alternative contact methods.</li> <li> <p>Links to FAQ and Help Center for self-service support.</p> </li> <li> <p>Map Section (Optional):</p> </li> <li> <p>If applicable, includes a map showing office locations.</p> </li> <li> <p>Footer:</p> </li> <li>Mirrors the main footer, linking to Privacy Policy, Terms of Service, and social media channels.</li> </ol>"},{"location":"features/user-pages/#functionality_1","title":"Functionality","text":"<ol> <li>Form Submission:</li> <li>Users fill out and submit the form. A confirmation message (\"Thank you for reaching out! We\u2019ll get back to you shortly.\") appears post-submission.</li> <li> <p>The form integrates with backend services to log the query and optionally notify the support team.</p> </li> <li> <p>Dynamic Fields:</p> </li> <li> <p>Validation ensures users provide all required information (e.g., valid email).</p> </li> <li> <p>Quick Access Links:</p> </li> <li>Provides users with links to self-service resources (FAQs, Help Center).</li> </ol>"},{"location":"features/user-pages/#user-interaction_1","title":"User Interaction","text":"<ul> <li>Form Usage:</li> <li>Users complete the form with their query and submit it.</li> <li> <p>Visual feedback guides the user (e.g., error messages for missing required fields).</p> </li> <li> <p>Alternative Contact:</p> </li> <li>Users can click on provided email or phone links to contact support directly.</li> </ul>"},{"location":"features/user-pages/#visual-layout_1","title":"Visual Layout","text":"<ul> <li>A clean, user-friendly form design.</li> <li>Consistent with Gaia's Cycle's branding, using its color palette and typography.</li> <li>Designed to be mobile-friendly for accessibility across devices.</li> </ul>"},{"location":"features/user-pages/#faq-page","title":"FAQ Page","text":""},{"location":"features/user-pages/#purpose_2","title":"Purpose","text":"<p>The FAQ (Frequently Asked Questions) page serves as a centralized hub where users can quickly find answers to common questions about Gaia's Cycle. It reduces the need for direct support and provides immediate, self-service help for users.</p>"},{"location":"features/user-pages/#layout_2","title":"Layout","text":"<ol> <li>Header Section:</li> <li> <p>Includes the title (FAQ) and a brief introduction, such as \"Find answers to common questions about Gaia's Cycle. If you need further assistance, feel free to contact us.\"</p> </li> <li> <p>Search Bar (Optional):</p> </li> <li> <p>A field allowing users to search for specific keywords or topics within the FAQs.</p> </li> <li> <p>Categories Section:</p> </li> <li> <p>FAQs are grouped into categories for better organization. Examples include:</p> <ul> <li>Getting Started: Questions about signing up, logging in, and setting up a profile.</li> <li>Features: Queries related to waste tracking, stats, or sustainability tips.</li> <li>Account Management: How to reset passwords, update details, or delete accounts.</li> <li>Technical Issues: Common troubleshooting steps for app-related problems.</li> </ul> </li> <li> <p>Questions and Answers:</p> </li> <li> <p>Each question is listed under its respective category, with answers displayed beneath or revealed on click (expand/collapse functionality).</p> </li> <li> <p>Footer Section:</p> </li> <li>Includes a link to the Contact Us page for unresolved queries.</li> </ol>"},{"location":"features/user-pages/#functionality_2","title":"Functionality","text":"<ol> <li>Interactive Search:</li> <li> <p>Allows users to type in keywords and dynamically filter questions.</p> </li> <li> <p>Expand/Collapse:</p> </li> <li> <p>Questions can be clicked to expand and reveal the answer, keeping the page clean and organized.</p> </li> <li> <p>Dynamic Updates:</p> </li> <li>Admins can add, edit, or remove FAQs based on user feedback and recurring inquiries.</li> </ol>"},{"location":"features/user-pages/#sample-categories-and-questions","title":"Sample Categories and Questions","text":""},{"location":"features/user-pages/#getting-started","title":"Getting Started","text":"<ul> <li>How do I create an account?</li> <li>Go to the homepage and click \"Sign Up.\" Fill in the required details and verify your email address.</li> <li>What should I do if I forget my password?</li> <li>Click \"Forgot Password\" on the login page, enter your registered email, and follow the instructions.</li> </ul>"},{"location":"features/user-pages/#features","title":"Features","text":"<ul> <li>How does waste tracking work?</li> <li>Input your daily waste data in the app, and it calculates insights based on your habits.</li> <li>Can I customize sustainability tips?</li> <li>Yes, go to the settings page and choose topics of interest for personalized tips.</li> </ul>"},{"location":"features/user-pages/#account-management","title":"Account Management","text":"<ul> <li>How do I update my email address?</li> <li>Navigate to the profile settings and edit your email under \"Contact Information.\"</li> <li>How can I delete my account?</li> <li>Contact support through the \"Contact Us\" page to request account deletion.</li> </ul>"},{"location":"features/user-pages/#technical-issues","title":"Technical Issues","text":"<ul> <li>The app isn\u2019t loading; what should I do?</li> <li>Ensure your internet connection is stable. If the issue persists, clear your app cache or restart your device.</li> <li>I found a bug. How can I report it?</li> <li>Use the \"Contact Us\" page to describe the issue, including screenshots if possible.</li> </ul>"},{"location":"features/user-pages/#visual-layout_2","title":"Visual Layout","text":"<p>The FAQ page uses a clean, minimalist design for easy readability: - Categories are listed in bold headers. - Questions are displayed as clickable rows for expand/collapse functionality. - A search bar at the top provides quick access to specific topics.</p>"},{"location":"features/user-pages/#user-journey","title":"User Journey","text":"<p>Here\u2019s the user journey for the general pages.</p> <p></p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>Follow these steps to set up the web application locally.</p>"},{"location":"getting-started/installation/#1-clone-the-repository","title":"1. Clone the Repository","text":"<p>Use Git to clone the project repository. Run the following command in your terminal or command prompt:</p> <pre><code>git clone &lt;repository-url&gt;\n</code></pre>"},{"location":"getting-started/prerequisites/","title":"Prerequisites","text":"<p>To set up and run the web app locally, ensure the following are in place:</p>"},{"location":"getting-started/prerequisites/#required-tools","title":"Required Tools","text":"<ol> <li>Python: Make sure Python 3.x is installed on your system.<ul> <li>To check: <code>python --version</code> or <code>python3 --version</code></li> <li>Download Python</li> </ul> </li> <li>Git: Ensure Git is installed for cloning the repository.<ul> <li>To check: <code>git --version</code></li> <li>Download Git</li> </ul> </li> <li>Text Editor or IDE: Use a code editor like Visual Studio Code, PyCharm, or any other IDE.</li> </ol>"},{"location":"getting-started/prerequisites/#understanding-virtual-environments","title":"Understanding Virtual Environments","text":"<p>A virtual environment is required to isolate the project dependencies. You'll use Python's built-in virtual environment tool (<code>venv</code>) to manage this.</p>"},{"location":"getting-started/prerequisites/#repository-access","title":"Repository Access","text":"<p>Ensure you have access to the GitHub repository containing the project code. Contact the project admin if you encounter issues.</p>"},{"location":"getting-started/running-the-app/","title":"Running the Application","text":"<p>Follow these steps to run the web application and its documentation locally.</p>"},{"location":"getting-started/running-the-app/#1-set-up-a-virtual-environment","title":"1. Set Up a Virtual Environment","text":"<p>To isolate the project dependencies, create and activate a virtual environment.</p>"},{"location":"getting-started/running-the-app/#create-the-virtual-environment","title":"Create the Virtual Environment","text":"<p>Run the following command : <pre><code>python3 -m venv &lt;environment-name&gt;\n</code></pre></p>"},{"location":"getting-started/running-the-app/#activate-the-virtual-environment","title":"Activate the Virtual Environment","text":""},{"location":"getting-started/running-the-app/#on-maclinux","title":"On Mac/Linux:","text":"<pre><code>source &lt;environment-name&gt;/bin/activate\n</code></pre>"},{"location":"getting-started/running-the-app/#on-windows","title":"On Windows:","text":"<p><pre><code>&lt;environment-name&gt;\\Scripts\\Activate.ps1\n</code></pre> You\u2019ll know the virtual environment is active when its name appears at the beginning of your terminal prompt.</p>"},{"location":"getting-started/running-the-app/#2-install-dependencies","title":"2. Install Dependencies","text":"<p>Dependencies for the project are listed in the requirements.txt file.</p>"},{"location":"getting-started/running-the-app/#run-this-command-to-install-them","title":"Run this command to install them:","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/running-the-app/#key-dependencies","title":"Key Dependencies:","text":"<ul> <li>fastapi: For the web framework.</li> <li>jinja2: For HTML templating.</li> <li>uvicorn: For running the FastAPI application.</li> <li>mkdocs-material: For building and serving the documentation.</li> </ul>"},{"location":"getting-started/running-the-app/#ensure-the-virtual-environment-is-active-before-running-the-above-command","title":"Ensure the virtual environment is active before running the above command.","text":""},{"location":"getting-started/running-the-app/#3-run-the-web-application","title":"3. Run the Web Application","text":"<p>Navigate to the app directory, then use Uvicorn to start the server:</p> <pre><code>cd app\n</code></pre> <p><pre><code>uvicorn main:app --reload\n</code></pre> The application will be accessible at:</p> <pre><code>http://127.0.0.1:8000\n</code></pre>"},{"location":"getting-started/running-the-app/#4-run-the-documentation","title":"4. Run the Documentation","text":"<p>To view the MkDocs-based documentation locally, use the following steps:</p> <p>Ensure the virtual environment is activated. Start the MkDocs server: <pre><code>mkdocs serve --dev-addr 127.0.0.1:5000\n</code></pre> Access the documentation in your browser at:</p> <p><pre><code>http://127.0.0.1:5000\n</code></pre> By following these steps, you can run both the application and its documentation locally for development and testing purposes.</p>"}]}