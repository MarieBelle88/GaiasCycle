{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#app-and-team","title":"App and Team","text":"<pre><code>App Name : GaiaCycle\n\nCustomer : Miriam Salzmann (Founder &amp; CEO)\n\nProfessor/Supervisor: Baseer Baheer\n\nDevelopment Team :\nMarie Belle (Coding Software Engineering 2023 - Current): Project Manager and Full Stack developper,\n\nRishi Ray (Coding Software Engineering 2023 - Current): Front End developper,\n\nBalita (Coding Software Engineering 2023 - Current): Full stack developper,\n\nIker (Coding Software Engineering 2023 - Current): Backend developper,\n\nMartin (Coding Software Engineering 2023 - Current): Front End developper,\n\nSamuel (Coding Software Engineering 2023 - Current): Front end developper,\n</code></pre>"},{"location":"#welcome-to-gaia-cycle-documentation","title":"Welcome to Gaia Cycle Documentation","text":"<p>Welcome to the documentation for Gaia's Cycle! This innovative urban farming project is dedicated to producing fresh vegetables in an environmentally friendly and resource-efficient manner.</p> <p>This guide will walk you through the purpose of Gaia's Cycle, highlight its key features, and provide detailed instructions for setup and usage.</p>"},{"location":"#what-is-gaiacycle","title":"What is GaiaCycle?","text":"<p>GaiaCycle is a web application focused on helping communities manage recyclable and organic waste. By combining user-friendly design with powerful tools, GaiaCycle empowers users to: - Track waste efficiently. - Promote eco-friendly habits. - Collaborate for a greener future.</p>"},{"location":"#features-at-a-glance","title":"Features at a Glance","text":"<ul> <li>Dashboard: Get a quick overview of waste statistics and progress.</li> <li>User Profiles: Manage individual or organizational data.</li> <li>Database Integration: Securely store and retrieve data.</li> <li>Responsive Design: Access the platform on any device.</li> </ul>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>Getting Started - A comprehensive guide to help you set up Gaia's Cycle, including installation instructions, initial configuration, and creating an account.</p> </li> <li> <p>Architecture - An in-depth explanation of Gaia's Cycle\u2019s system architecture, detailing how the app is structured and how its components interact.</p> </li> <li> <p>Features - Overview of the key features of Gaia's Cycle, including user-facing pages, functionality, and how the app helps users manage their urban farming efforts.</p> </li> <li> <p>Components - Detailed documentation of the individual components of the app, explaining their purpose, design, and how they work together.</p> </li> <li> <p>Deployment - Instructions for deploying Gaia's Cycle to different environments, including local setups and production environments, with troubleshooting tips.</p> </li> <li> <p>Development - Information for developers on how to contribute to Gaia's Cycle, including the development workflow, code style guidelines, and building new features.</p> </li> <li> <p>Advanced Topics - A deep dive into more complex topics like database optimization, performance tuning, and advanced configurations of Gaia's Cycle.</p> </li> <li> <p>Troubleshooting - Solutions to common issues users and developers may encounter when using or setting up Gaia's Cycle.</p> </li> </ul>"},{"location":"#how-to-use-this-guide","title":"How to Use This Guide","text":"<p>Navigate through the sections above or use the sidebar menu to find the information you need. Start with Getting Started to set up the app.</p> <p>Together, let\u2019s make sustainability simpler with GaiaCycle!</p>"},{"location":"faq/","title":"Frequently Asked Questions (FAQ)","text":"<p>This FAQ section addresses common questions about the Gaia Cycle application, providing quick solutions and clarifications.</p>"},{"location":"faq/#general-questions","title":"General Questions","text":""},{"location":"faq/#1-what-is-gaia-cycle","title":"1. What is Gaia Cycle?","text":"<p>Gaia Cycle is a platform designed to promote sustainable urban farming by tracking waste, offering sustainability insights, and providing tools to monitor progress toward eco-friendly goals.</p>"},{"location":"faq/#2-who-can-use-gaia-cycle","title":"2. Who can use Gaia Cycle?","text":"<p>Gaia Cycle is designed for individuals, communities, and organizations interested in sustainable farming and waste management.</p>"},{"location":"faq/#installation-and-setup","title":"Installation and Setup","text":""},{"location":"faq/#3-how-do-i-install-gaia-cycle","title":"3. How do I install Gaia Cycle?","text":"<p>Follow the installation guide provided in the documentation. Steps include cloning the repository, installing dependencies, and configuring environment variables.</p>"},{"location":"faq/#4-what-are-the-system-requirements","title":"4. What are the system requirements?","text":"<ul> <li>Python 3.8 or higher</li> <li>pip for dependency management</li> <li>MySQL database</li> <li>Docker (optional for deployment)</li> </ul>"},{"location":"faq/#features-and-functionality","title":"Features and Functionality","text":""},{"location":"faq/#5-how-do-i-search-for-locations-on-the-map","title":"5. How do I search for locations on the map?","text":"<p>Use the search bar to enter ZIP codes or city names. The map dynamically updates to show markers for relevant locations.</p>"},{"location":"faq/#6-can-i-add-my-own-data-to-the-system","title":"6. Can I add my own data to the system?","text":"<p>Yes, authorized users can submit data through the admin panel or designated upload forms.</p>"},{"location":"faq/#7-what-kind-of-insights-does-the-platform-provide","title":"7. What kind of insights does the platform provide?","text":"<p>Gaia Cycle provides sustainability metrics, waste tracking statistics, and personalized tips for improving eco-efficiency.</p>"},{"location":"faq/#account-and-security","title":"Account and Security","text":""},{"location":"faq/#8-how-do-i-create-an-account","title":"8. How do I create an account?","text":"<p>Click the Sign Up button on the homepage, fill in your details, and verify your email address.</p>"},{"location":"faq/#9-what-should-i-do-if-i-forget-my-password","title":"9. What should I do if I forget my password?","text":"<p>Use the Forgot Password link on the login page to reset your password.</p>"},{"location":"faq/#10-is-my-data-secure","title":"10. Is my data secure?","text":"<p>Yes, we use encryption and secure protocols to protect user data.</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#11-why-is-the-map-not-loading","title":"11. Why is the map not loading?","text":"<ul> <li>Ensure you have a stable internet connection.</li> <li>Clear your browser cache.</li> <li>Check API key configuration in your environment variables.</li> </ul>"},{"location":"faq/#12-what-should-i-do-if-the-application-crashes","title":"12. What should I do if the application crashes?","text":"<ul> <li>Check logs for errors.</li> <li>Verify all dependencies are installed.</li> <li>Restart the server and try again.</li> </ul>"},{"location":"faq/#13-how-do-i-report-bugs-or-issues","title":"13. How do I report bugs or issues?","text":"<p>Report bugs through the Issues section in our GitHub repository.</p>"},{"location":"faq/#contact-and-support","title":"Contact and Support","text":""},{"location":"faq/#14-how-can-i-contact-support","title":"14. How can I contact support?","text":"<p>For assistance, email us at support@gaiacycle.com or visit our Help Center.</p>"},{"location":"faq/#15-is-there-a-community-forum","title":"15. Is there a community forum?","text":"<p>Yes, you can join our community discussions on our GitHub Discussions.</p>"},{"location":"faq/#final-notes","title":"Final Notes","text":"<p>If your question is not listed here, please check the complete documentation or reach out to our support team for further assistance.</p>"},{"location":"glossary/","title":"Glossary","text":"<p>This glossary provides definitions of technical terms and acronyms used in the Gaia Cycle application. It serves as a quick reference guide for users and developers.</p>"},{"location":"glossary/#a","title":"A","text":"<ul> <li>API (Application Programming Interface): A set of rules and protocols that allows different software applications to communicate with each other.</li> <li>Authentication: The process of verifying a user's identity before granting access to the application.</li> </ul>"},{"location":"glossary/#b","title":"B","text":"<ul> <li>Backend: The server-side part of the application responsible for data processing, storage, and communication with the frontend.</li> <li>Bootstrap: A front-end framework for building responsive and mobile-first websites.</li> </ul>"},{"location":"glossary/#c","title":"C","text":"<ul> <li>Cache: A storage layer that temporarily stores frequently accessed data to improve performance.</li> <li>CI/CD (Continuous Integration and Continuous Deployment): A method for automating software testing and deployment.</li> </ul>"},{"location":"glossary/#d","title":"D","text":"<ul> <li>Database: A structured collection of data that is stored and managed electronically.</li> <li>Docker: A platform for developing, shipping, and running applications inside containers.</li> </ul>"},{"location":"glossary/#e","title":"E","text":"<ul> <li>Environment Variables: Configuration values stored outside the codebase, often used for sensitive data like API keys.</li> <li>Encryption: The process of converting data into a secure format to prevent unauthorized access.</li> </ul>"},{"location":"glossary/#f","title":"F","text":"<ul> <li>Frontend: The client-side part of the application responsible for rendering the user interface.</li> <li>Framework: A pre-built set of tools and libraries for developing software applications.</li> </ul>"},{"location":"glossary/#h","title":"H","text":"<ul> <li>HTML (HyperText Markup Language): The standard language used to create web pages.</li> <li>HTTP (Hypertext Transfer Protocol): A protocol used for transmitting data over the web.</li> </ul>"},{"location":"glossary/#j","title":"J","text":"<ul> <li>JSON (JavaScript Object Notation): A lightweight data format used for exchanging data between servers and clients.</li> <li>Jinja2: A template engine for Python, used for rendering dynamic HTML pages.</li> </ul>"},{"location":"glossary/#m","title":"M","text":"<ul> <li>Middleware: Software that acts as a bridge between different applications or components.</li> <li>MySQL: A relational database management system used to store and manage data.</li> </ul>"},{"location":"glossary/#r","title":"R","text":"<ul> <li>REST (Representational State Transfer): An architectural style for designing networked applications using HTTP requests.</li> <li>Redis: An in-memory data store used for caching and real-time data processing.</li> </ul>"},{"location":"glossary/#s","title":"S","text":"<ul> <li>SQL (Structured Query Language): A standard language used to manage and query databases.</li> <li>Schema: The structure that defines the organization of data in a database.</li> </ul>"},{"location":"glossary/#t","title":"T","text":"<ul> <li>Template: A pre-defined format for generating dynamic content in web applications.</li> <li>Token: A piece of data used for authentication and session management.</li> </ul>"},{"location":"glossary/#final-notes","title":"Final Notes","text":"<p>This glossary aims to clarify technical terms used throughout the Gaia Cycle application. For additional terms or clarifications, refer to the GitHub repository.</p>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":""},{"location":"troubleshooting/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"troubleshooting/#issue-database-connection-error","title":"Issue: Database Connection Error","text":"<ul> <li>Description: Unable to connect to the MySQL database.</li> <li>Solution:<ol> <li>Verify the MySQL container is running using <code>docker ps</code>.</li> <li>Check the connection details (host, port, username, password).</li> <li>Ensure the <code>MYSQL_ROOT_PASSWORD</code> environment variable matches the configuration.</li> <li>Review MySQL logs with <code>docker logs &lt;container_id&gt;</code>.</li> </ol> </li> </ul>"},{"location":"troubleshooting/#issue-api-returns-500-internal-server-error","title":"Issue: API Returns 500 Internal Server Error","text":"<ul> <li>Description: The backend API fails with a server error.</li> <li>Solution:<ol> <li>Check FastAPI logs for detailed stack trace.</li> <li>Verify the request payload matches the required schema.</li> <li>Ensure database migrations have been applied.</li> </ol> </li> </ul>"},{"location":"troubleshooting/#issue-redis-caching-not-working","title":"Issue: Redis Caching Not Working","text":"<ul> <li>Description: Cached data is not retrieved as expected.</li> <li>Solution:<ol> <li>Verify the Redis container is running.</li> <li>Check Redis logs using <code>docker logs &lt;container_id&gt;</code>.</li> <li>Test connectivity using <code>redis-cli ping</code>.</li> <li>Confirm cache keys and expiration policies in the code.</li> </ol> </li> </ul>"},{"location":"troubleshooting/#issue-frontend-unable-to-fetch-api-data","title":"Issue: Frontend Unable to Fetch API Data","text":"<ul> <li>Description: Frontend fails to load data from the backend API.</li> <li>Solution:<ol> <li>Confirm the backend API is reachable from the frontend by checking network requests in the browser.</li> <li>Verify CORS settings in the FastAPI backend.</li> <li>Check the API URL configuration in the frontend.</li> </ol> </li> </ul>"},{"location":"troubleshooting/#debugging-steps-for-frontendbackend","title":"Debugging Steps for Frontend/Backend","text":""},{"location":"troubleshooting/#frontend-debugging","title":"Frontend Debugging","text":"<ol> <li>Inspect the Browser Console:<ul> <li>Check for JavaScript errors or network request failures.</li> <li>Use the \"Network\" tab in developer tools to verify API responses.</li> </ul> </li> <li>Validate API Endpoints:<ul> <li>Test the backend API using tools like Postman or curl.</li> </ul> </li> <li>Debug React/Vue Components (if applicable):<ul> <li>Add console logs to trace component state and props.</li> <li>Use browser developer tools to inspect component hierarchy.</li> </ul> </li> </ol>"},{"location":"troubleshooting/#backend-debugging","title":"Backend Debugging","text":"<ol> <li>Check Logs:<ul> <li>Inspect FastAPI logs for errors using <code>docker logs &lt;backend_container_id&gt;</code>.</li> </ul> </li> <li>Test Database Queries:<ul> <li>Execute SQL queries directly on the MySQL database to verify data integrity.</li> </ul> </li> <li>Validate Dependencies:<ul> <li>Confirm that all required Python packages are installed and up to date.</li> </ul> </li> <li>Use Debug Mode:<ul> <li>Run the backend in debug mode (<code>uvicorn app:app --reload</code>) for detailed error messages.</li> </ul> </li> </ol>"},{"location":"troubleshooting/#links-to-support-resources","title":"Links to Support Resources","text":""},{"location":"troubleshooting/#official-documentation","title":"Official Documentation","text":"<ul> <li>FastAPI: https://fastapi.tiangolo.com/</li> <li>MySQL: https://dev.mysql.com/doc/</li> <li>Redis: https://redis.io/docs/</li> </ul>"},{"location":"troubleshooting/#community-forums","title":"Community Forums","text":"<ul> <li>Stack Overflow: https://stackoverflow.com/</li> <li>FastAPI Discussions: https://github.com/tiangolo/fastapi/discussions</li> </ul>"},{"location":"troubleshooting/#tools-and-utilities","title":"Tools and Utilities","text":"<ul> <li>Postman: https://www.postman.com/</li> <li>Redis CLI: https://redis.io/docs/ui/cli/</li> <li>Docker Docs: https://docs.docker.com/</li> </ul>"},{"location":"advanced-topics/api-reference/","title":"API Endpoints","text":""},{"location":"advanced-topics/api-reference/#user-endpoints","title":"User Endpoints","text":""},{"location":"advanced-topics/api-reference/#post-apiuser","title":"<code>POST /api/user</code>","text":"<ul> <li>Description: Create a new user</li> <li>Request Body: <code>UserCreate</code> object<ul> <li>Example:   <pre><code>{\n  \"contact\": \"user@example.com\",\n  \"name\": \"John Doe\",\n  \"username\": \"johndoe\",\n  \"password\": \"securepassword123\"\n}\n</code></pre></li> </ul> </li> <li>Response: <code>UserRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"contact\": \"user@example.com\",\n  \"name\": \"John Doe\",\n  \"username\": \"johndoe\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#get-apiuseruser_id","title":"<code>GET /api/user/{user_id}</code>","text":"<ul> <li>Description: Get user by ID</li> <li>Path Parameter: <code>user_id</code> (integer)</li> <li>Response: <code>UserRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"contact\": \"user@example.com\",\n  \"name\": \"John Doe\",\n  \"username\": \"johndoe\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#get-apiuserusernameusername","title":"<code>GET /api/user/username/{username}</code>","text":"<ul> <li>Description: Get user by username</li> <li>Path Parameter: <code>username</code> (string)</li> <li>Response: <code>UserRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"contact\": \"user@example.com\",\n  \"name\": \"John Doe\",\n  \"username\": \"johndoe\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#farm-endpoints","title":"Farm Endpoints","text":""},{"location":"advanced-topics/api-reference/#post-apifarm","title":"<code>POST /api/farm</code>","text":"<ul> <li>Description: Create a new farm</li> <li>Request Body: <code>FarmCreate</code> object<ul> <li>Example:   <pre><code>{\n  \"lat\": 34.0522,\n  \"lon\": -118.2437,\n  \"size\": 150.5\n}\n</code></pre></li> </ul> </li> <li>Response: <code>FarmRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"lat\": 34.0522,\n  \"lon\": -118.2437,\n  \"size\": 150.5\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#get-apifarm","title":"<code>GET /api/farm</code>","text":"<ul> <li>Description: Get all farms</li> <li>Response: List of <code>FarmRead</code> objects<ul> <li>Example:   <pre><code>[\n  {\n    \"id\": 1,\n    \"lat\": 34.0522,\n    \"lon\": -118.2437,\n    \"size\": 150.5\n  },\n  {\n    \"id\": 2,\n    \"lat\": 36.7783,\n    \"lon\": -119.4179,\n    \"size\": 200.0\n  }\n]\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#get-apifarmfarm_id","title":"<code>GET /api/farm/{farm_id}</code>","text":"<ul> <li>Description: Get farm by ID</li> <li>Path Parameter: <code>farm_id</code> (integer)</li> <li>Response: <code>FarmRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"lat\": 34.0522,\n  \"lon\": -118.2437,\n  \"size\": 150.5\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#tower-endpoints","title":"Tower Endpoints","text":""},{"location":"advanced-topics/api-reference/#post-apitower","title":"<code>POST /api/tower</code>","text":"<ul> <li>Description: Create a new tower</li> <li>Request Body: <code>TowerCreate</code> object<ul> <li>Example:   <pre><code>{\n  \"farm_id\": 1,\n  \"slot_amount\": 10\n}\n</code></pre></li> </ul> </li> <li>Response: <code>TowerRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"farm_id\": 1,\n  \"slot_amount\": 10\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#get-apitower","title":"<code>GET /api/tower</code>","text":"<ul> <li>Description: Get all towers</li> <li>Response: List of <code>TowerRead</code> objects<ul> <li>Example:   <pre><code>[\n  {\n    \"id\": 1,\n    \"farm_id\": 1,\n    \"slot_amount\": 10\n  },\n  {\n    \"id\": 2,\n    \"farm_id\": 1,\n    \"slot_amount\": 8\n  }\n]\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#get-apitowertower_id","title":"<code>GET /api/tower/{tower_id}</code>","text":"<ul> <li>Description: Get tower by ID</li> <li>Path Parameter: <code>tower_id</code> (integer)</li> <li>Response: <code>TowerRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"farm_id\": 1,\n  \"slot_amount\": 10\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#device-endpoints","title":"Device Endpoints","text":""},{"location":"advanced-topics/api-reference/#post-apidevice","title":"<code>POST /api/device</code>","text":"<ul> <li>Description: Create a new device</li> <li>Request Body: <code>DeviceCreate</code> object<ul> <li>Example:   <pre><code>{\n  \"tower_id\": 1,\n  \"farm_id\": 1,\n  \"slot_id\": 1,\n  \"device_type\": \"FARM\",\n  \"status\": \"ONLINE\",\n  \"value\": 50,\n  \"unit\": \"kWh\",\n  \"installation_date\": \"2023-01-15\"\n}\n</code></pre></li> </ul> </li> <li>Response: <code>DeviceRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"tower_id\": 1,\n  \"farm_id\": 1,\n  \"slot_id\": 1,\n  \"device_type\": \"FARM\",\n  \"status\": \"ONLINE\",\n  \"value\": 50,\n  \"unit\": \"kWh\",\n  \"installation_date\": \"2023-01-15\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#get-apidevice","title":"<code>GET /api/device</code>","text":"<ul> <li>Description: Get all devices</li> <li>Response: List of <code>DeviceRead</code> objects<ul> <li>Example:   <pre><code>[\n  {\n    \"id\": 1,\n    \"tower_id\": 1,\n    \"farm_id\": 1,\n    \"slot_id\": 1,\n    \"device_type\": \"FARM\",\n    \"status\": \"ONLINE\",\n    \"value\": 50,\n    \"unit\": \"kWh\",\n    \"installation_date\": \"2023-01-15\"\n  }\n]\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#get-apidevicedevice_id","title":"<code>GET /api/device/{device_id}</code>","text":"<ul> <li>Description: Get device by ID</li> <li>Path Parameter: <code>device_id</code> (integer)</li> <li>Response: <code>DeviceRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"tower_id\": 1,\n  \"farm_id\": 1,\n  \"slot_id\": 1,\n  \"device_type\": \"FARM\",\n  \"status\": \"ONLINE\",\n  \"value\": 50,\n  \"unit\": \"kWh\",\n  \"installation_date\": \"2023-01-15\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#slot-endpoints","title":"Slot Endpoints","text":""},{"location":"advanced-topics/api-reference/#post-apislot","title":"<code>POST /api/slot</code>","text":"<ul> <li>Description: Create a new slot</li> <li>Request Body: <code>SlotCreate</code> object<ul> <li>Example:   <pre><code>{\n  \"tower_id\": 1,\n  \"crop\": \"Corn\",\n  \"date_filled\": \"2023-02-01\",\n  \"expected_harvest\": \"2023-05-01\"\n}\n</code></pre></li> </ul> </li> <li>Response: <code>SlotRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"tower_id\": 1,\n  \"crop\": \"Corn\",\n  \"date_filled\": \"2023-02-01\",\n  \"expected_harvest\": \"2023-05-01\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#get-apislot","title":"<code>GET /api/slot</code>","text":"<ul> <li>Description: Get all slots</li> <li>Response: List of <code>SlotRead</code> objects<ul> <li>Example:   <pre><code>[\n  {\n    \"id\": 1,\n    \"tower_id\": 1,\n    \"crop\": \"Corn\",\n    \"date_filled\": \"2023-02-01\",\n    \"expected_harvest\": \"2023-05-01\"\n  }\n]\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/api-reference/#get-apislotslot_id","title":"<code>GET /api/slot/{slot_id}</code>","text":"<ul> <li>Description: Get slot by ID</li> <li>Path Parameter: <code>slot_id</code> (integer)</li> <li>Response: <code>SlotRead</code> object<ul> <li>Example:   <pre><code>{\n  \"id\": 1,\n  \"tower_id\": 1,\n  \"crop\": \"Corn\",\n  \"date_filled\": \"2023-02-01\",\n  \"expected_harvest\": \"2023-05-01\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"advanced-topics/kafka/","title":"Kafka Integration","text":""},{"location":"advanced-topics/kafka/#kafka-in-the-application","title":"Kafka in the Application","text":""},{"location":"advanced-topics/kafka/#1-how-kafka-is-used-in-the-app","title":"1. How Kafka is Used in the App","text":"<p>Kafka is implemented as a false data producer. This allows us to display the web app as if it is already in use.: - Streaming device telemetry data from producers to consumers. - Feeding real-time data into the database for storage and analytics. - Supporting asynchronous workflows like logging or background processing.</p>"},{"location":"advanced-topics/kafka/#2-setting-up-kafka","title":"2. Setting Up Kafka","text":"<p>The kafka begins producing as soon as you create a device. It will instantiate a thread, producing data for it. The consumer will run automatically.</p>"},{"location":"advanced-topics/kafka/#prerequisites","title":"Prerequisites","text":"<p>These are the packages installed through the requirements.txt - kafka-python - spark-sql-kafka - kafka-python-ng - mysql-connector-python</p>"},{"location":"advanced-topics/mkdocs/","title":"Welcome to Gaia Cycle Documentation","text":"<p>Gaia Cycle is a platform dedicated to sustainable urban farming and data-driven insights for a greener future. This documentation provides an overview of the project structure, setup instructions, and key features.</p> <p>For more information on MkDocs, visit mkdocs.org.</p>"},{"location":"advanced-topics/mkdocs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs build --clean</code> - Clear caches during builds.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"advanced-topics/mkdocs/#project-layout","title":"Project Layout","text":"<pre><code>mkdocs.yml    # Configuration file for MkDocs\n\ndocs/         # Documentation folder\n    index.md  # Homepage\n    images/   # Media and diagrams\n    features/ # Feature documentation\n    development/ # Development guides\n    deployment/  # Deployment instructions\n</code></pre>"},{"location":"advanced-topics/mkdocs/#configuration-mkdocsyml","title":"Configuration (mkdocs.yml)","text":"<p>The <code>mkdocs.yml</code> file defines the site structure, theme, and additional settings:</p>"},{"location":"advanced-topics/mkdocs/#basic-configuration","title":"Basic Configuration:","text":"<pre><code>site_name: Gaia Cycle Documentation\nrepo_url: https://github.com/MarieBelle88/GaiasCycle\n\ntheme:\n  name: material\n  language: en\n  palette:\n    - scheme: default\n      toggle:\n        icon: material/weather-night\n        name: Switch to dark mode\n    - scheme: slate\n      toggle:\n        icon: material/weather-sunny\n        name: Switch to light mode\n  font:\n    text: Roboto\n    code: Roboto Mono\n  features:\n    - navigation.tabs\n    - navigation.expand\n    - content.code.copy\n    - content.code.annotate\n    - navigation.sections\n    - navigation.instant\nextra:\n  generator: false\n\nmarkdown_extensions:\n  - admonition\n  - pymdownx.details\n  - pymdownx.superfences\n  - pymdownx.highlight\n  - tables\n\nextra_javascript:\n  - https://unpkg.com/mermaid@10/dist/mermaid.min.js\n  - https://unpkg.com/mathjax@3/es5/tex-mml-chtml.js\n</code></pre>"},{"location":"advanced-topics/mkdocs/#navigation","title":"Navigation:","text":"<pre><code>nav:\n  - Home: index.md\n  - Getting Started:\n      - Prerequisites: getting-started/prerequisites.md\n      - Installation: getting-started/installation.md\n      - Running the App: getting-started/running-the-app.md\n  - Architecture:\n      - Overview: architecture/overview.md\n      - Sequence Diagrams: architecture/sequence-diagrams.md\n  - Features:\n      - User Pages: features/user-pages.md\n      - Admin Pages: features/admin-pages.md\n      - Map and Search: features/map-and-search.md\n  - Development:\n      - Git Workflow: development/git-workflow.md\n      - Testing: development/testing.md\n  - Advanced Topics:\n      - Kafka: advanced-topics/kafka.md\n      - API Reference: advanced-topics/api-reference.md\n  - Troubleshooting: troubleshooting.md\n</code></pre>"},{"location":"advanced-topics/mkdocs/#additional-features","title":"Additional Features","text":""},{"location":"advanced-topics/mkdocs/#dynamic-content-rendering","title":"Dynamic Content Rendering","text":"<ul> <li>Supports Mermaid Diagrams for flowcharts and diagrams.</li> <li>Includes MathJax for rendering mathematical equations.</li> <li>Code snippets can be copied directly using the copy button.</li> </ul>"},{"location":"advanced-topics/mkdocs/#mobile-friendly-design","title":"Mobile-Friendly Design","text":"<ul> <li>Material theme ensures responsive layouts across devices.</li> </ul>"},{"location":"advanced-topics/mkdocs/#search-and-navigation-enhancements","title":"Search and Navigation Enhancements","text":"<ul> <li>Tabbed navigation for quick access.</li> <li>Instant search for faster lookup.</li> </ul>"},{"location":"advanced-topics/mkdocs/#final-notes","title":"Final Notes","text":"<p>This documentation is structured to help developers and users quickly set up and navigate the Gaia Cycle platform. Follow the provided commands to build, test, and deploy the documentation site. For further assistance, contact our support team or visit the GitHub repository.</p>"},{"location":"architecture/database/","title":"Database Schema Documentation","text":""},{"location":"architecture/database/#1-schema-diagram","title":"1. Schema Diagram","text":""},{"location":"architecture/database/#entities-and-their-relationships","title":"Entities and Their Relationships","text":""},{"location":"architecture/database/#users","title":"Users","text":"<ul> <li>Primary Key: <code>id</code></li> <li>Attributes:<ul> <li><code>contact</code></li> <li><code>name</code></li> <li><code>username</code></li> <li><code>password</code></li> </ul> </li> <li>No relationships with other tables.</li> </ul>"},{"location":"architecture/database/#farms","title":"Farms","text":"<ul> <li>Primary Key: <code>id</code></li> <li>Attributes:<ul> <li><code>lat</code></li> <li><code>lon</code></li> <li><code>size</code></li> </ul> </li> <li>Relationships:<ul> <li>One-to-Many with <code>Towers</code> (via <code>farm_id</code>)</li> <li>One-to-Many with <code>Devices</code> (via <code>farm_id</code>)</li> </ul> </li> </ul>"},{"location":"architecture/database/#towers","title":"Towers","text":"<ul> <li>Primary Key: <code>id</code></li> <li>Attributes:<ul> <li><code>slot_amount</code></li> <li><code>farm_id</code></li> </ul> </li> <li>Relationships:<ul> <li>Many-to-One with <code>Farms</code> (via <code>farm_id</code>)</li> <li>One-to-Many with <code>Slots</code> (via <code>tower_id</code>)</li> <li>One-to-Many with <code>Devices</code> (via <code>tower_id</code>)</li> </ul> </li> </ul>"},{"location":"architecture/database/#slots","title":"Slots","text":"<ul> <li>Primary Key: <code>id</code></li> <li>Attributes:<ul> <li><code>tower_id</code></li> <li><code>crop</code></li> <li><code>date_filled</code></li> <li><code>expected_harvest</code></li> </ul> </li> <li>Relationships:<ul> <li>Many-to-One with <code>Towers</code> (via <code>tower_id</code>)</li> <li>One-to-Many with <code>Devices</code> (via <code>slot_id</code>)</li> </ul> </li> </ul>"},{"location":"architecture/database/#devices","title":"Devices","text":"<ul> <li>Primary Key: <code>id</code></li> <li>Attributes:<ul> <li><code>farm_id</code></li> <li><code>tower_id</code></li> <li><code>slot_id</code></li> <li><code>device_type</code> (Enum: <code>FARM</code>, <code>TOWER</code>, <code>SLOT</code>)</li> <li><code>value</code></li> <li><code>unit</code></li> <li><code>status</code> (Enum: <code>ONLINE</code>, <code>OFFLINE</code>)</li> <li><code>installation_date</code></li> </ul> </li> <li>Relationships:<ul> <li>Many-to-One with <code>Farms</code> (via <code>farm_id</code>)</li> <li>Many-to-One with <code>Towers</code> (via <code>tower_id</code>)</li> <li>Many-to-One with <code>Slots</code> (via <code>slot_id</code>)</li> </ul> </li> </ul>"},{"location":"architecture/database/#diagram-simplified-textual-representation","title":"Diagram (Simplified Textual Representation)","text":"<pre><code>Users\n    - id (PK)\n    - contact\n    - name\n    - username\n    - password\n\nFarms\n    - id (PK)\n    - lat\n    - lon\n    - size\n    Relationships:\n        - Towers (One-to-Many)\n        - Devices (One-to-Many)\n\nTowers\n    - id (PK)\n    - slot_amount\n    - farm_id (FK to Farms)\n    Relationships:\n        - Slots (One-to-Many)\n        - Devices (One-to-Many)\n\nSlots\n    - id (PK)\n    - tower_id (FK to Towers)\n    - crop\n    - date_filled\n    - expected_harvest\n    Relationships:\n        - Devices (One-to-Many)\n\nDevices\n    - id (PK)\n    - farm_id (FK to Farms)\n    - tower_id (FK to Towers)\n    - slot_id (FK to Slots)\n    - device_type (Enum: FARM, TOWER, SLOT)\n    - value\n    - unit\n    - status (Enum: ONLINE, OFFLINE)\n    - installation_date\n</code></pre>"},{"location":"architecture/database/#2-explanation-of-tables-and-relationships","title":"2. Explanation of Tables and Relationships","text":""},{"location":"architecture/database/#users-table","title":"Users Table","text":"<ul> <li>Stores information about users managing or monitoring the system.</li> <li>No direct relationships with other tables.</li> </ul>"},{"location":"architecture/database/#farms-table","title":"Farms Table","text":"<ul> <li>Represents agricultural farms.</li> <li>Each farm can have multiple towers and devices.</li> <li>Key Relationships:<ul> <li>One-to-Many with Towers: A farm can have multiple towers.</li> <li>One-to-Many with Devices: Devices can be installed directly on a farm.</li> </ul> </li> </ul>"},{"location":"architecture/database/#towers-table","title":"Towers Table","text":"<ul> <li>Represents structures within farms, capable of holding multiple slots.</li> <li>Each tower belongs to a single farm.</li> <li>Key Relationships:<ul> <li>Many-to-One with Farms: A tower is linked to one farm.</li> <li>One-to-Many with Slots: A tower can have multiple slots.</li> <li>One-to-Many with Devices: Devices can be installed on towers.</li> </ul> </li> </ul>"},{"location":"architecture/database/#slots-table","title":"Slots Table","text":"<ul> <li>Represents subdivisions within towers, which can hold crops.</li> <li>Each slot belongs to one tower.</li> <li>Key Relationships:<ul> <li>Many-to-One with Towers: A slot belongs to one tower.</li> <li>One-to-Many with Devices: Devices can be installed on slots.</li> </ul> </li> </ul>"},{"location":"architecture/database/#devices-table","title":"Devices Table","text":"<ul> <li>Represents hardware sensors or devices installed on farms, towers, or slots.</li> <li>The <code>device_type</code> attribute determines whether the device is linked to a farm, tower, or slot.</li> <li>Key Relationships:<ul> <li>Many-to-One with Farms: Devices can be installed on farms.</li> <li>Many-to-One with Towers: Devices can be installed on towers.</li> <li>Many-to-One with Slots: Devices can be installed on slots.</li> </ul> </li> </ul>"},{"location":"architecture/database/#3-data-flow","title":"3. Data Flow","text":""},{"location":"architecture/database/#insertion","title":"Insertion","text":"<ol> <li>User Creation: Users register into the system, creating an entry in the <code>users</code> table.</li> <li>Farm Creation: A new farm is added to the <code>farms</code> table with latitude, longitude, and size information.</li> <li>Tower Creation: Towers are added to the <code>towers</code> table, linking them to the relevant farm using <code>farm_id</code>.</li> <li>Slot Creation: Slots are added to the <code>slots</code> table, linking them to the relevant tower using <code>tower_id</code>.</li> <li>Device Creation: Devices are added to the <code>devices</code> table, specifying their type (<code>FARM</code>, <code>TOWER</code>, or <code>SLOT</code>) and linking them to the appropriate entity.</li> </ol>"},{"location":"architecture/database/#retrieval","title":"Retrieval","text":"<ol> <li>Device Data: Fetch devices installed on a specific farm, tower, or slot by querying the <code>devices</code> table with appropriate filters on <code>farm_id</code>, <code>tower_id</code>, or <code>slot_id</code>.</li> <li>Farm Overview: Fetch all towers and devices linked to a specific farm.</li> <li>Tower Overview: Fetch all slots and devices linked to a specific tower.</li> <li>Slot Overview: Fetch all devices linked to a specific slot.</li> </ol>"},{"location":"architecture/database/#updates","title":"Updates","text":"<ol> <li>Devices periodically send updated data (e.g., status or value) using producer threads (like Kafka). These updates are processed and stored in external systems or log streams for analytics.</li> </ol>"},{"location":"architecture/database/#deletion","title":"Deletion","text":"<ol> <li>If a farm, tower, or slot is deleted, cascade deletions may occur for linked towers, slots, and devices.</li> </ol>"},{"location":"architecture/overview/","title":"Gaia's Cycle Architecture Overview","text":""},{"location":"architecture/overview/#architecture-diagram","title":"Architecture Diagram","text":"<p>Below is the simplified architecture diagram of the Gaia's Cycle project, which uses color coding to represent different components and their relationships. </p> <p>The diagram above illustrates the core components of the Gaia's Cycle project and their relationships.</p> <pre><code>sequenceDiagram\n    Users[Users] --&gt; Frontend[Frontend (Bootstrap)]\n     Frontend --&gt; Backend[Backend (FastAPI, SQLAlchemy, Pydantic)]\n    Backend --&gt; MySQL[MySQL Database]\n    Backend --&gt; Kafka[Kafka]\n    Backend --&gt; Ngrok[Ngrok]\n    Backend --&gt; Docker[Docker]\n    Backend --&gt; APIGateway[API Gateway (FastAPI)]\n    Kafka --&gt; EventBus[Event Bus (Kafka)]\n    EventBus --&gt; DataLake[Data Lake (S3)]\n    APIGateway --&gt; DataLake\n    MySQL --&gt; DataLake\n    Backend --&gt; Authentication[User Authentication (Passlib)]\n</code></pre>"},{"location":"architecture/overview/#legend","title":"Legend:","text":"<ul> <li>Frontend: Green</li> <li>Backend: Blue</li> <li>Database: Red</li> <li>Messaging: Yellow</li> <li>API &amp; Gateway: Gray</li> <li>Others: Pink</li> </ul>"},{"location":"architecture/overview/#key-components-and-their-relationships","title":"Key Components and Their Relationships","text":"<ul> <li>Frontend: Built with Bootstrap for a responsive UI, interacting with the Backend via API calls.</li> <li>Backend: Powered by FastAPI, SQLAlchemy, and Pydantic for efficient database interactions, schema validation, and API management.</li> <li>MySQL Database: Stores user, farm, tower, device, and slot data.</li> <li>Kafka: Handles event streaming and message queuing between services.</li> <li>Ngrok: Provides secure tunnels for local development and testing.</li> <li>Docker: Used to containerize the application and ensure environment consistency.</li> <li>API Gateway: FastAPI manages all API requests and responses.</li> <li>Event Bus: Kafka handles asynchronous events between services.</li> <li>Data Lake (S3): Stores large datasets, including logs, sensor data, and analytics results.</li> <li>User Authentication: Managed with Passlib for secure password hashing and authentication.</li> </ul> <p>The system is designed to be modular and scalable, allowing for future enhancements and integrations.</p>"},{"location":"architecture/overview/#app-flow","title":"App Flow","text":""},{"location":"architecture/overview/#1-user-interaction-with-the-frontend","title":"1. User Interaction with the Frontend","text":"<ul> <li>Users interact with the frontend through a responsive web interface.</li> <li>The frontend displays live data, such as crop statuses and sensor readings, and allows users to make decisions based on this information (e.g., adjusting irrigation or adding new crops).</li> <li>When a user submits a request (e.g., updating crop information), it is sent to the backend via API calls.</li> </ul>"},{"location":"architecture/overview/#2-backend-processing","title":"2. Backend Processing","text":"<ul> <li>The backend receives the request from the frontend and processes the necessary business logic (e.g., validating input, calculating crop yield predictions).</li> <li>It communicates with the database to query or update information (e.g., adding new crop data or updating sensor readings).</li> <li>Any real-time sensor data is handled asynchronously, utilizing Kafka to manage the data streams and ensure non-blocking operations.</li> <li>After processing, the backend sends the appropriate response back to the frontend.</li> </ul>"},{"location":"architecture/overview/#3-database-operations","title":"3. Database Operations","text":"<ul> <li>The backend queries or updates the MySQL database for any relevant information (e.g., checking available crop slots or saving new crop data).</li> <li>Data retrieval is optimized for speed and accuracy, and relational queries are used to fetch related information, such as crop status, sensor data, and user information.</li> </ul> <p>This architecture ensures that the system is both efficient and scalable, with separate components handling different responsibilities and third-party services augmenting the functionality.</p>"},{"location":"architecture/sequence-diagrams/","title":"Sequence Diagrams","text":"<p># Sequence Diagrams</p>"},{"location":"architecture/sequence-diagrams/#data-retrieval-eg-stats-fetching","title":"Data Retrieval (e.g., Stats Fetching)","text":""},{"location":"architecture/sequence-diagrams/#sequence-diagram-data-analysis-workflow","title":"Sequence Diagram: Data Analysis Workflow","text":"<p>This diagram illustrates the data flow and interactions between components when a user requests to view statistics. It highlights the role of each component, including the frontend, backend, database, and third-party services, in fetching, analyzing, and presenting the data.</p>"},{"location":"architecture/sequence-diagrams/#steps","title":"Steps:","text":"<ol> <li> <p>Data Production:</p> <ul> <li>The Kafka Producer generates and streams data to the Kafka Consumer. This could represent real-time data from IoT devices, user interactions, or other sources relevant to the system.</li> </ul> </li> <li> <p>Data Ingestion:</p> <ul> <li>The Kafka Consumer listens to the topic and consumes the data, parsing and processing it as necessary.</li> <li>Once processed, the Kafka Consumer writes the data to the relational database (e.g., MySQL).</li> </ul> </li> <li> <p>Result Presentation:</p> <ul> <li>The results are sent back to the FastAPI backend.</li> <li>The backend prepares these metrics in a structured format (e.g., JSON or rendered HTML) and sends them to the frontend.</li> <li>The frontend displays the metrics to the user through the stats dashboard.</li> </ul> </li> </ol> <p></p>"},{"location":"components/backend/","title":"Backend","text":""},{"location":"components/backend/#backend-architecture-and-responsibilities","title":"Backend Architecture and Responsibilities","text":""},{"location":"components/backend/#overview","title":"Overview","text":"<p>The backend is designed to: - Handle API requests from the frontend and external systems. - Manage business logic for user, farm, tower, device, and slot functionalities. - Interact with the database to perform CRUD operations. - Provide secure and scalable services. - Integrate with third-party tools like Redis for caching and Docker for containerization.</p>"},{"location":"components/backend/#architecture","title":"Architecture","text":"<ul> <li>Layered Architecture:<ul> <li>Presentation Layer: Exposes RESTful APIs.</li> <li>Service Layer: Contains business logic and validation.</li> <li>Data Access Layer: Handles interactions with the database.</li> </ul> </li> <li>Technologies:<ul> <li>Python (FastAPI framework)</li> <li>MySQL database</li> <li>Docker for containerization</li> <li>Redis for caching frequently accessed data</li> </ul> </li> </ul>"},{"location":"components/backend/#key-responsibilities","title":"Key Responsibilities","text":"<ol> <li>User Management:<ul> <li>Registration and authentication.</li> <li>Fetch user data by ID or username.</li> </ul> </li> <li>Farm and Tower Management:<ul> <li>CRUD operations for farms and towers.</li> </ul> </li> <li>Device Monitoring:<ul> <li>Storing and retrieving device information.</li> <li>Managing device status (online/offline).</li> </ul> </li> <li>Slot Tracking:<ul> <li>Monitoring crop and harvest details.</li> </ul> </li> </ol>"},{"location":"components/backend/#frameworks-and-libraries-used","title":"Frameworks and Libraries Used","text":""},{"location":"components/backend/#core-backend-framework","title":"Core Backend Framework","text":"<ul> <li>FastAPI:<ul> <li>Provides asynchronous API handling.</li> <li>Built-in data validation with Pydantic.</li> </ul> </li> </ul>"},{"location":"components/backend/#database","title":"Database","text":"<ul> <li>SQLAlchemy (with AsyncSession):<ul> <li>ORM for database operations.</li> <li>Support for MySQL.</li> </ul> </li> </ul>"},{"location":"components/backend/#caching","title":"Caching","text":"<ul> <li>Redis:<ul> <li>Used for caching frequently accessed data.</li> </ul> </li> </ul>"},{"location":"components/backend/#containerization","title":"Containerization","text":"<ul> <li>Docker:<ul> <li>Provides containerized environment for the application and MySQL database.</li> </ul> </li> </ul>"},{"location":"components/backend/#additional-libraries","title":"Additional Libraries","text":"<ul> <li>Pydantic:<ul> <li>Schema definitions and data validation.</li> </ul> </li> <li>Enum:<ul> <li>Defines constants like device status and type.</li> </ul> </li> <li>Datetime:<ul> <li>Handles date and time operations.</li> </ul> </li> </ul>"},{"location":"components/backend/#apis-exposed-by-the-backend","title":"APIs Exposed by the Backend","text":""},{"location":"components/backend/#user-apis","title":"User APIs","text":"<ul> <li><code>POST /api/user</code>:<ul> <li>Create a new user.</li> <li>Request Body: <code>UserCreate</code> object</li> <li>Response: <code>UserRead</code> object</li> </ul> </li> <li><code>GET /api/user/{user_id}</code>:<ul> <li>Fetch user by ID.</li> <li>Path Parameter: <code>user_id</code> (integer)</li> <li>Response: <code>UserRead</code> object</li> </ul> </li> <li><code>GET /api/user/username/{username}</code>:<ul> <li>Fetch user by username.</li> <li>Path Parameter: <code>username</code> (string)</li> <li>Response: <code>UserRead</code> object</li> </ul> </li> </ul>"},{"location":"components/backend/#farm-apis","title":"Farm APIs","text":"<ul> <li><code>POST /api/farm</code>:<ul> <li>Create a new farm.</li> <li>Request Body: <code>FarmCreate</code> object</li> <li>Response: <code>FarmRead</code> object</li> </ul> </li> <li><code>GET /api/farm</code>:<ul> <li>Fetch all farms.</li> <li>Response: List of <code>FarmRead</code> objects</li> </ul> </li> <li><code>GET /api/farm/{farm_id}</code>:<ul> <li>Fetch farm by ID.</li> <li>Path Parameter: <code>farm_id</code> (integer)</li> <li>Response: <code>FarmRead</code> object</li> </ul> </li> </ul>"},{"location":"components/backend/#tower-apis","title":"Tower APIs","text":"<ul> <li><code>POST /api/tower</code>:<ul> <li>Create a new tower.</li> <li>Request Body: <code>TowerCreate</code> object</li> <li>Response: <code>TowerRead</code> object</li> </ul> </li> <li><code>GET /api/tower</code>:<ul> <li>Fetch all towers.</li> <li>Response: List of <code>TowerRead</code> objects</li> </ul> </li> <li><code>GET /api/tower/{tower_id}</code>:<ul> <li>Fetch tower by ID.</li> <li>Path Parameter: <code>tower_id</code> (integer)</li> <li>Response: <code>TowerRead</code> object</li> </ul> </li> </ul>"},{"location":"components/backend/#device-apis","title":"Device APIs","text":"<ul> <li><code>POST /api/device</code>:<ul> <li>Create a new device.</li> <li>Request Body: <code>DeviceCreate</code> object</li> <li>Response: <code>DeviceRead</code> object</li> </ul> </li> <li><code>GET /api/device</code>:<ul> <li>Fetch all devices.</li> <li>Response: List of <code>DeviceRead</code> objects</li> </ul> </li> <li><code>GET /api/device/{device_id}</code>:<ul> <li>Fetch device by ID.</li> <li>Path Parameter: <code>device_id</code> (integer)</li> <li>Response: <code>DeviceRead</code> object</li> </ul> </li> </ul>"},{"location":"components/backend/#slot-apis","title":"Slot APIs","text":"<ul> <li><code>POST /api/slot</code>:<ul> <li>Create a new slot.</li> <li>Request Body: <code>SlotCreate</code> object</li> <li>Response: <code>SlotRead</code> object</li> </ul> </li> <li><code>GET /api/slot</code>:<ul> <li>Fetch all slots.</li> <li>Response: List of <code>SlotRead</code> objects</li> </ul> </li> <li><code>GET /api/slot/{slot_id}</code>:<ul> <li>Fetch slot by ID.</li> <li>Path Parameter: <code>slot_id</code> (integer)</li> <li>Response: <code>SlotRead</code> object</li> </ul> </li> </ul>"},{"location":"components/building-blocks/","title":"Building Blocks","text":"<p>The Gaia Cycle platform is designed with modular components to ensure scalability, maintainability, and high performance. This document outlines the key building blocks of the system.</p>"},{"location":"components/building-blocks/#1-frontend","title":"1. Frontend","text":"<ul> <li>Developed using HTML, CSS, and JavaScript, with Bootstrap for responsive design.</li> <li>Provides an intuitive interface for tracking sustainability metrics and managing data.</li> <li>Dynamically fetches and displays data through API integration.</li> </ul>"},{"location":"components/building-blocks/#2-backend","title":"2. Backend","text":"<ul> <li>Built using FastAPI, a Python framework optimized for speed and reliability.</li> <li>Manages data validation, processing, and routing of API calls.</li> <li>Implements authentication, authorization, and security measures.</li> </ul>"},{"location":"components/building-blocks/#3-database","title":"3. Database","text":"<ul> <li>Powered by MySQL, designed for storing structured data efficiently.</li> <li>Handles scalability requirements to support large datasets related to user interactions and sustainability insights.</li> </ul>"},{"location":"components/building-blocks/#4-apis","title":"4. APIs","text":"<ul> <li>Implements RESTful APIs to facilitate communication between the frontend and backend.</li> <li>Provides endpoints for:</li> <li>User management</li> <li>Data submission</li> <li>Real-time analytics</li> </ul>"},{"location":"components/building-blocks/#5-third-party-integrations","title":"5. Third-Party Integrations","text":"<ul> <li>Uses Twilio for SMS notifications and communication.</li> <li>Integrates Redis for caching frequently accessed data, improving performance.</li> <li>Leverages Ngrok for secure external tunneling during development.</li> </ul>"},{"location":"components/building-blocks/#6-testing-frameworks","title":"6. Testing Frameworks","text":"<ul> <li>Backend testing with pytest for validation and performance testing.</li> <li>Frontend testing frameworks for UI consistency and usability testing.</li> </ul>"},{"location":"components/building-blocks/#7-deployment-tools","title":"7. Deployment Tools","text":"<ul> <li>Uses Docker for containerization, ensuring consistent deployment across environments.</li> <li>Implements CI/CD pipelines for continuous integration and delivery, streamlining updates.</li> </ul>"},{"location":"components/building-blocks/#final-notes","title":"Final Notes","text":"<p>The modular design of the Gaia Cycle platform ensures seamless scalability and ease of maintenance. Each component plays a vital role in providing users with a reliable and interactive experience. For more information, visit the GitHub repository.</p>"},{"location":"components/frontend/","title":"Frontend Components","text":""},{"location":"components/frontend/#overview","title":"Overview","text":"<p>In this project, we leveraged multiple technologies to build an efficient and responsive frontend, integrating Jinja2, Uvicorn, Bootstrap, and FontAwesome icons. These tools enabled us to create dynamic, user-friendly web pages while ensuring scalability and maintainability.</p>"},{"location":"components/frontend/#uvicorn","title":"Uvicorn","text":"<p>Uvicorn, an ASGI server, was used to serve the application. It efficiently handles asynchronous requests, ensuring high performance when rendering frontend content. Uvicorn allows FastAPI to serve HTML templates and static content like CSS and JS to the user.</p>"},{"location":"components/frontend/#jinja2","title":"Jinja2","text":"<p>For rendering dynamic HTML pages, Jinja2 was integrated into FastAPI to generate templates. Jinja2 provided a flexible way to pass Python variables into HTML files, allowing us to render dynamic content such as user inputs, data from the backend, and templates with reusable components. This enabled a clean separation of concerns, ensuring that logic and presentation were maintained separately.</p>"},{"location":"components/frontend/#bootstrap","title":"Bootstrap","text":"<p>We used Bootstrap, a popular CSS framework, to quickly develop a responsive and modern frontend design. Bootstrap\u2019s grid system allowed us to create a flexible layout for various screen sizes, while its built-in components such as buttons, navigation bars, and forms improved the overall user experience. Bootstrap\u2019s pre-defined styles significantly reduced the development time and helped us maintain consistency across the web pages.</p>"},{"location":"components/frontend/#fontawesome-icons","title":"FontAwesome Icons","text":"<p>To enhance the visual appeal and provide intuitive iconography, we incorporated FontAwesome icons. FontAwesome icons were used for various UI components, including buttons, navigation items, and content sections. They allowed us to visually communicate actions and features, improving accessibility and user experience.</p>"},{"location":"components/jinja/","title":"Jinja2 Template Engine","text":"<p>Jinja2 is a powerful templating engine for Python, widely used for generating dynamic content in web applications. This document provides an overview of Jinja2, its features, and examples of usage.</p>"},{"location":"components/jinja/#1-introduction","title":"1. Introduction","text":"<ul> <li>Jinja2 is a template engine designed to work with Python applications.</li> <li>It allows dynamic rendering of HTML pages by embedding Python code within templates.</li> </ul>"},{"location":"components/jinja/#2-key-features","title":"2. Key Features","text":"<ul> <li>Template Inheritance: Enables the reuse of common structures across multiple templates.</li> <li>Filters: Allows transformation of data before rendering.</li> <li>Loops and Conditionals: Provides control flow mechanisms like loops (<code>for</code>) and conditionals (<code>if</code>).</li> <li>Macros: Supports reusable blocks of code similar to functions.</li> <li>Escaping: Protects against XSS attacks by auto-escaping data.</li> </ul>"},{"location":"components/jinja/#3-template-syntax","title":"3. Template Syntax","text":""},{"location":"components/jinja/#variables","title":"Variables","text":"<p><pre><code>&lt;p&gt;Hello, {{ user.name }}!&lt;/p&gt;\n</code></pre> - <code>{{ ... }}</code> is used to output variables.</p>"},{"location":"components/jinja/#conditionals","title":"Conditionals","text":"<pre><code>{% if user.is_admin %}\n  &lt;p&gt;Welcome, Admin!&lt;/p&gt;\n{% else %}\n  &lt;p&gt;Welcome, User!&lt;/p&gt;\n{% endif %}\n</code></pre>"},{"location":"components/jinja/#loops","title":"Loops","text":"<pre><code>&lt;ul&gt;\n{% for item in items %}\n  &lt;li&gt;{{ item }}&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n</code></pre>"},{"location":"components/jinja/#filters","title":"Filters","text":"<p><pre><code>&lt;p&gt;{{ name|upper }}&lt;/p&gt;\n</code></pre> - Filters are applied using the <code>|</code> symbol, transforming values before rendering.</p>"},{"location":"components/jinja/#4-template-inheritance","title":"4. Template Inheritance","text":""},{"location":"components/jinja/#base-template-basehtml","title":"Base Template (base.html)","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;{% block title %}Default Title{% endblock %}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;header&gt;\n    {% block header %}&lt;h1&gt;Header&lt;/h1&gt;{% endblock %}\n  &lt;/header&gt;\n  &lt;main&gt;\n    {% block content %}{% endblock %}\n  &lt;/main&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"components/jinja/#child-template-indexhtml","title":"Child Template (index.html)","text":"<pre><code>{% extends 'base.html' %}\n\n{% block title %}Home Page{% endblock %}\n\n{% block content %}\n&lt;p&gt;Welcome to the Home Page!&lt;/p&gt;\n{% endblock %}\n</code></pre>"},{"location":"components/jinja/#5-common-filters","title":"5. Common Filters","text":"<ul> <li><code>length</code>: Returns the length of a list or string.</li> <li><code>lower</code>: Converts text to lowercase.</li> <li><code>upper</code>: Converts text to uppercase.</li> <li><code>default</code>: Provides a fallback value if a variable is undefined.</li> <li><code>join</code>: Joins a list into a string.</li> </ul> <p>Example: <pre><code>&lt;p&gt;{{ ['apple', 'banana', 'cherry']|join(', ') }}&lt;/p&gt;\n</code></pre></p>"},{"location":"components/jinja/#6-installation","title":"6. Installation","text":"<pre><code>pip install jinja2\n</code></pre>"},{"location":"components/jinja/#7-integration-with-python","title":"7. Integration with Python","text":"<pre><code>from jinja2 import Environment, FileSystemLoader\n\n# Set up template environment\nenv = Environment(loader=FileSystemLoader('templates'))\ntemplate = env.get_template('index.html')\n\n# Render template with data\ndata = {'user': {'name': 'John'}}\noutput = template.render(data)\nprint(output)\n</code></pre>"},{"location":"components/jinja/#final-notes","title":"Final Notes","text":"<p>Jinja2 simplifies dynamic HTML rendering and integrates seamlessly with Python frameworks like Flask and FastAPI. For additional examples and advanced usage, refer to the Jinja2 Documentation.</p>"},{"location":"components/third-party-integrations/","title":"Third-Party Integrations","text":""},{"location":"deployment/docker-setup/","title":"Docker Setup","text":""},{"location":"deployment/docker-setup/#mysql","title":"MYSQL","text":"<p>This project requires a mysql database to run, you can set one up by running the following commands on a terminal</p> <ul> <li>get the mysql image from the repository</li> </ul> <p><pre><code>docker pull mysql\n</code></pre> - run the container and set the password to \"secret\"</p> <p><pre><code>docker run --name gaiascycle_db -e MYSQL_ROOT_PASSWORD=secret -d mysql:latest\n</code></pre> - then from the container's terminal, create the following database</p> <pre><code>docker exec -it gaiascycle_db sh\n</code></pre> <ul> <li>once inside the container, access mysql by running the following command and inputting \"secret\" as the password <pre><code>mysql\n</code></pre></li> <li>The last step will be to create the database</li> <li>In a query console run the following.</li> </ul> <pre><code>CREATE DATABASE gaiascycle;\n</code></pre>"},{"location":"deployment/docker-setup/#kafka","title":"Kafka","text":"<p>This Project also requires a kafka image to be run. Kafka will produce the dummy data needed to test our product.</p> <ul> <li>Pull a kafka image on docker <pre><code>docker pull kafka\n</code></pre></li> <li>Create and run a container <pre><code>docker run -d --name broker apache/kafka:latest\n</code></pre></li> </ul>"},{"location":"deployment/environment-variables/","title":"Environment Variables","text":""},{"location":"deployment/production-deployment/","title":"Production Deployment","text":""},{"location":"development/coding-standards/","title":"Coding Standards","text":"<p>To ensure consistent, maintainable, and high-quality code for the GaiaCycle project, the following coding standards and best practices must be adhered to:</p>"},{"location":"development/coding-standards/#1-naming-conventions","title":"1. Naming Conventions","text":"<ul> <li>Variables:</li> <li>Use descriptive and meaningful names that reflect GaiaCycle's domain (e.g., <code>user_feedback</code> or <code>vegetable_data</code>).</li> <li>Use snake_case for variable names (e.g., <code>plant_growth_rate</code>).</li> <li>Functions:</li> <li>Name functions in snake_case, starting with a verb to indicate action (e.g., <code>fetch_user_feedback</code>, <code>calculate_water_usage</code>).</li> <li>Classes:</li> <li>Use PascalCase for class names (e.g., <code>UserProfile</code>, <code>PlantGrowthManager</code>).</li> <li>Constants:</li> <li>Use UPPERCASE with underscores for constants (e.g., <code>MAX_PLANT_CAPACITY</code>, <code>DEFAULT_GROWTH_RATE</code>).</li> </ul>"},{"location":"development/coding-standards/#2-code-formatting","title":"2. Code Formatting","text":"<ul> <li>Indentation: Use 4 spaces per indentation level for Python files and maintain consistent structure across all web development files.</li> <li>Line Length: Limit lines to 80 characters for Python and ensure a clear structure in HTML/CSS.</li> <li>Spacing:</li> <li>Ensure proper alignment of Bootstrap components for UI consistency.</li> <li>Maintain readable spacing in <code>.css</code> and <code>.js</code> files for smoother debugging.</li> </ul>"},{"location":"development/coding-standards/#3-commenting-and-documentation","title":"3. Commenting and Documentation","text":"<ul> <li>Comments:</li> <li>Provide comments to explain logic in modules like <code>contactUs</code> or <code>plantMonitoring</code>.</li> <li>Document any calculations or unique algorithmic implementations specific to GaiaCycle (e.g., soil moisture prediction).</li> <li>Docstrings:</li> <li>Use docstrings for all public-facing Python functions and methods.</li> <li>Example for GaiaCycle:     <pre><code>def calculate_growth_rate(soil_moisture, light_exposure):\n    \"\"\"\n    Calculate the growth rate of a plant based on environmental factors.\n\n    Args:\n        soil_moisture (float): Percentage of moisture in the soil.\n        light_exposure (int): Hours of sunlight exposure.\n\n    Returns:\n        float: Estimated growth rate per day.\n    \"\"\"\n    return (soil_moisture * 0.4) + (light_exposure * 0.6)\n</code></pre></li> </ul>"},{"location":"development/coding-standards/#4-error-handling","title":"4. Error Handling","text":"<ul> <li>Handle errors gracefully in user input forms like the Contact Us and Feedback pages.</li> <li>Validate and sanitize all user-provided data before saving to the database.</li> <li>Use clear error messages for user-facing issues (e.g., \"Invalid email address format\" or \"Database connection failed\").</li> <li>Example for GaiaCycle backend:   ```python   try:       db_connection = connect_to_database()   except ConnectionError as e:       print(f\"Database Error: {e}\")       log_error(e)</li> </ul>"},{"location":"development/git-workflow/","title":"Git Workflow","text":"<p>This document outlines the Git workflow for the Gaia Cycle project to ensure consistency, collaboration, and code quality. It defines the branching strategy, commit conventions, and merging processes.</p>"},{"location":"development/git-workflow/#1-branching-strategy","title":"1. Branching Strategy","text":"<p>We follow the Gitflow Workflow to manage feature development and releases. The main branches include:</p> <ul> <li>main: Stable, production-ready code. Only release versions are merged here.</li> <li>develop: Integration branch for development. Features and fixes are merged here before being pushed to <code>main</code>.</li> </ul>"},{"location":"development/git-workflow/#supporting-branches","title":"Supporting Branches","text":"<ul> <li>feature/*: For new features under development.</li> <li>bugfix/*: For addressing bugs found during development.</li> <li>hotfix/*: For critical fixes directly applied to <code>main</code>.</li> <li>release/*: For preparing and finalizing new releases.</li> </ul>"},{"location":"development/git-workflow/#2-branch-naming-conventions","title":"2. Branch Naming Conventions","text":"<ul> <li>Feature Branch: <code>feature/&lt;feature-name&gt;</code>   Example: <code>feature/user-authentication</code></li> <li>Bugfix Branch: <code>bugfix/&lt;bug-name&gt;</code>   Example: <code>bugfix/fix-login-error</code></li> <li>Hotfix Branch: <code>hotfix/&lt;hotfix-name&gt;</code>   Example: <code>hotfix/critical-bug-fix</code></li> <li>Release Branch: <code>release/&lt;version&gt;</code>   Example: <code>release/v1.0.0</code></li> </ul>"},{"location":"development/git-workflow/#3-commit-messages","title":"3. Commit Messages","text":"<p>Commit messages should follow the Conventional Commits format:</p> <pre><code>[type]: Short description\n\nOptional longer description.\n</code></pre>"},{"location":"development/git-workflow/#types","title":"Types","text":"<ul> <li>feat: A new feature.</li> <li>fix: A bug fix.</li> <li>docs: Documentation updates.</li> <li>style: Code style changes (formatting, no logic changes).</li> <li>refactor: Code refactoring without changing functionality.</li> <li>test: Adding or updating tests.</li> <li>chore: Maintenance tasks like dependency updates.</li> </ul> <p>Examples: <pre><code>feat: Add user authentication\n\nImplemented login and registration APIs with JWT support.\n\nfix: Resolve login error\n\nFixed the invalid token issue during login.\n</code></pre></p>"},{"location":"development/git-workflow/#4-workflow-process","title":"4. Workflow Process","text":"<ol> <li> <p>Start a Feature</p> <ul> <li>Create a new branch from <code>develop</code>:   <pre><code>git checkout develop\ngit pull origin develop\ngit checkout -b feature/&lt;feature-name&gt;\n</code></pre></li> </ul> </li> <li> <p>Develop and Commit</p> <ul> <li>Make changes and commit following the conventions:   <pre><code>git add .\ngit commit -m \"feat: Add new user authentication\"\n</code></pre></li> </ul> </li> <li> <p>Push Changes</p> <ul> <li>Push the branch to the remote repository:   <pre><code>git push origin feature/&lt;feature-name&gt;\n</code></pre></li> </ul> </li> <li> <p>Create a Pull Request (PR)</p> <ul> <li>Open a PR to merge changes into <code>develop</code>.</li> <li>Add reviewers and link related issues.</li> </ul> </li> <li> <p>Code Review and Approval</p> <ul> <li>Reviewers approve or request changes.</li> <li>Apply requested changes and update the PR.</li> </ul> </li> <li> <p>Merge to Develop</p> <ul> <li>Once approved, merge the branch into <code>develop</code>:   <pre><code>git checkout develop\ngit merge feature/&lt;feature-name&gt;\ngit push origin develop\n</code></pre></li> </ul> </li> <li> <p>Release and Deployment</p> <ul> <li>When ready, merge <code>develop</code> into <code>release/&lt;version&gt;</code> for final testing.</li> <li>After testing, merge the release branch into <code>main</code>:   <pre><code>git checkout main\ngit merge release/&lt;version&gt;\ngit push origin main\n</code></pre></li> </ul> </li> </ol>"},{"location":"development/git-workflow/#5-pull-request-guidelines","title":"5. Pull Request Guidelines","text":"<ul> <li>Use descriptive titles and link to related issues.</li> <li>Provide context for the changes in the PR description.</li> <li>Include screenshots or logs if applicable.</li> <li>Ensure all tests pass before submitting.</li> </ul>"},{"location":"development/git-workflow/#6-tagging-releases","title":"6. Tagging Releases","text":"<p>Tag releases for better version tracking: <pre><code>git tag -a v1.0.0 -m \"Release version 1.0.0\"\ngit push origin v1.0.0\n</code></pre></p>"},{"location":"development/git-workflow/#7-handling-conflicts","title":"7. Handling Conflicts","text":"<ul> <li>If a merge conflict occurs: <pre><code>git checkout branch-with-conflict\ngit merge branch-to-merge\n</code></pre></li> <li>Manually resolve conflicts and mark them as resolved: <pre><code>git add resolved-file.py\ngit commit -m \"fix: Resolve merge conflict\"\n</code></pre></li> </ul>"},{"location":"development/git-workflow/#final-notes","title":"Final Notes","text":"<p>Following this Git workflow ensures a structured approach to development, enabling collaboration and reducing deployment errors. For any issues, reach out to the project lead or consult the Git Documentation.</p>"},{"location":"development/testing/","title":"Testing Guidelines","text":""},{"location":"development/testing/#1-types-of-tests","title":"1. Types of Tests","text":""},{"location":"development/testing/#unit-testing","title":"Unit Testing","text":"<p>Unit tests focus on testing individual components in isolation. These tests ensure that each part of the application works as expected. For instance, testing backend API endpoints, user authentication logic, or database interactions.</p>"},{"location":"development/testing/#integration-testing","title":"Integration Testing","text":"<p>Integration tests check the interaction between different components of the system. This includes validating that the backend communicates correctly with the database, and that API calls return the expected results when integrated with other services.</p>"},{"location":"development/testing/#end-to-end-testing","title":"End-to-End Testing","text":"<p>End-to-end tests simulate real-world user interactions with the entire system. These tests ensure that the complete user journey works smoothly, from the frontend interface to the backend and database.</p>"},{"location":"development/testing/#performance-testing","title":"Performance Testing","text":"<p>Performance tests validate that the application can handle expected loads and perform efficiently under stress. This involves checking response times and system behavior under heavy traffic.</p>"},{"location":"development/testing/#security-testing","title":"Security Testing","text":"<p>Security tests are designed to identify vulnerabilities within the system. They verify that sensitive data is protected, and the application is resistant to common security threats such as SQL injection, cross-site scripting (XSS), and cross-site request forgery (CSRF).</p>"},{"location":"development/testing/#2-frameworks-and-tools","title":"2. Frameworks and Tools","text":"<p>The following frameworks and tools are used for different types of testing:</p>"},{"location":"development/testing/#unit-testing-frameworks","title":"Unit Testing Frameworks:","text":"<ul> <li>pytest: A robust testing framework for Python, which is easy to use and integrates well with other tools.</li> <li>unittest: Python's built-in testing module, used for unit testing.</li> </ul>"},{"location":"development/testing/#integration-testing-frameworks","title":"Integration Testing Frameworks:","text":"<ul> <li>Postman: Used to test RESTful APIs. It allows you to send HTTP requests and validate responses, making it ideal for integration testing of backend services.</li> <li>pytest: Also used for integration testing, especially with custom test suites for backend API interactions.</li> </ul>"},{"location":"development/testing/#end-to-end-testing-frameworks","title":"End-to-End Testing Frameworks:","text":"<ul> <li>Selenium: An automated web testing framework that interacts with browsers to simulate user actions.</li> </ul>"},{"location":"development/testing/#performance-testing-tools","title":"Performance Testing Tools:","text":"<ul> <li>JMeter: A tool for load testing and performance benchmarking, useful to simulate heavy traffic and validate system responsiveness.</li> <li>Locust: A Python-based tool that allows you to define user behavior and test how the system handles concurrent requests.</li> </ul>"},{"location":"development/testing/#security-testing-tools","title":"Security Testing Tools:","text":"<ul> <li>OWASP ZAP: A security testing tool that scans the application for vulnerabilities, including common OWASP threats.</li> <li>Burp Suite: A powerful tool for identifying and mitigating security issues within web applications.</li> </ul>"},{"location":"development/testing/#3-steps-to-run-tests-locally","title":"3. Steps to Run Tests Locally","text":""},{"location":"development/testing/#setting-up-the-environment","title":"Setting Up the Environment","text":"<ol> <li> <p>Install Dependencies:    First, make sure that all necessary dependencies for testing are installed. Run the following command to install the required packages:    <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Set Up the Local Database (for integration tests):    Since we're using a local database for testing, ensure that it's set up properly. We are using MySQL locally. Ensure that your local database is running and accessible for tests.(MySQL container from Docker)</p> </li> </ol> <p>You can also use test-specific databases for testing purposes, ensuring that your development database isn't affected by test data.</p> <p>Make sure your local database connection is properly configured in your <code>.env</code> file or environment variables:    <pre><code>export DATABASE_URL=your_local_database_url\nexport API_KEY=your_api_key\n</code></pre></p> <ol> <li> <p>Environment Variables:    Some tests may require specific environment variables. Set them as needed, either in a <code>.env</code> file or through your system settings. For example:    <pre><code>export DATABASE_URL=your_local_database_url\nexport API_KEY=your_api_key\n</code></pre></p> </li> <li> <p>Configure Test Settings:    Some tests may require mock services or certain configurations. Ensure that any mock services are set up (e.g., mock databases, APIs) and the appropriate test configuration is applied.</p> </li> </ol>"},{"location":"development/testing/#running-unit-tests","title":"Running Unit Tests","text":"<p>To run the unit tests, use the following command: <pre><code>pytest tests/unit/\n</code></pre> You can specify additional options such as <code>--maxfail=1</code> to stop after the first failure: <pre><code>pytest --maxfail=1 tests/unit/\n</code></pre></p>"},{"location":"development/testing/#running-integration-tests","title":"Running Integration Tests","text":"<p>For integration tests: - Postman: Import the collection for integration tests and click \"Run\" to execute them. - pytest: If running integration tests via <code>pytest</code>, use:   <pre><code>pytest tests/integration/\n</code></pre></p>"},{"location":"development/testing/#running-end-to-end-tests","title":"Running End-to-End Tests","text":"<p>For end-to-end testing with Selenium or Cypress: - Selenium: Ensure that the browser driver (e.g., ChromeDriver) is installed. Then run the tests:   <pre><code>pytest tests/e2e/\n</code></pre></p>"},{"location":"development/testing/#running-performance-tests","title":"Running Performance Tests","text":"<p>To run performance tests with Locust or JMeter: - Locust: Run Locust for load testing:   <pre><code>locust -f tests/performance/test_script.py\n</code></pre></p> <ul> <li>JMeter: Import the JMeter test plan and run it from the JMeter interface.</li> </ul>"},{"location":"development/testing/#running-security-tests","title":"Running Security Tests","text":"<p>For security tests: - OWASP ZAP: Start OWASP ZAP and configure the target application URL. Run automated security scans. - Burp Suite: Use Burp Suite to scan for vulnerabilities in the application.</p>"},{"location":"development/testing/#additional-notes","title":"Additional Notes:","text":"<ul> <li>Test Coverage: Aim to have high test coverage by writing tests for the core components of your application.</li> <li>CI/CD Integration: Ensure that tests are integrated into your continuous integration (CI) pipeline, so tests run automatically on each commit.</li> </ul>"},{"location":"features/AI-analysis/","title":"AI Analysis Features","text":""},{"location":"features/admin-pages/","title":"Dashboard Page Overview","text":"<p>The dashboard serves as a centralized hub, offering users an intuitive way to navigate the web app and monitor key functionalities. This guide outlines the layout, features, and purpose of the dashboard page.</p> <p>The dashboard page is designed to streamline user interaction, providing quick access to critical metrics, data visualizations, and tools to enhance usability.</p>"},{"location":"features/admin-pages/#pages-and-their-purpose","title":"Pages and Their Purpose","text":"<ul> <li> <p>Dashboard Overview:   This section highlights key metrics such as total devices, active farms, and power usage. Visual data representations (e.g., graphs) provide a snapshot of system performance.</p> </li> <li> <p>Statistics Page:   Focuses on detailed analytics, offering insights into system trends, user activity, and energy consumption. Interactive graphs and filters enable users to explore data across different time frames.</p> </li> <li> <p>Settings:   A customizable area where users can configure account preferences, manage notifications, and adjust system parameters.</p> </li> <li> <p>Inventory Management:   Users can view, categorize, and track all devices, farms, and towers in the system. This page includes search functionality for efficient navigation.</p> </li> </ul>"},{"location":"features/admin-pages/#features-and-functionalities","title":"Features and Functionalities","text":""},{"location":"features/admin-pages/#key-metrics-overview","title":"Key Metrics Overview","text":"<p>The top section of the dashboard displays quick statistics: - Total number of devices connected. - Active farms currently operational. - Current power usage and trends over time.</p>"},{"location":"features/admin-pages/#interactive-graphs","title":"Interactive Graphs","text":"<p>The dashboard integrates dynamic graphs that update in real-time, showing: - Daily, weekly, and monthly trends in system performance. - Comparisons of power consumption across farms.</p>"},{"location":"features/admin-pages/#collapsible-insights-table","title":"Collapsible Insights Table","text":"<p>Users can toggle a detailed metrics table for an in-depth breakdown of performance statistics.</p>"},{"location":"features/admin-pages/#stats-page","title":"Stats Page","text":"<p>The Statistics Page complements the dashboard by focusing on data visualization and in-depth analysis.</p>"},{"location":"features/admin-pages/#features","title":"Features:","text":"<ol> <li>Graphs: Visual representations of data trends with options to filter by day, week, or month.</li> <li>Data Overview: A table that allows users to grasp a general idea of the data over their farm.  </li> </ol>"},{"location":"features/map-and-search/","title":"Map and Search","text":"<p>This document outlines the features and functionalities of the Map and Search module in the Gaia Cycle platform. It supports geolocation-based exploration and detailed search capabilities for user convenience.</p>"},{"location":"features/map-and-search/#1-map-functionalities","title":"1. Map Functionalities","text":"<ul> <li>Interactive map interface for visual exploration of locations.</li> <li>Displays markers for key areas such as:<ul> <li>Vertical farming towers.</li> <li>Community gardens.</li> <li>Recycling centers.</li> </ul> </li> <li>Zoom and pan controls for navigation.</li> <li>Dynamic updates based on user interactions and search queries.</li> </ul>"},{"location":"features/map-and-search/#2-search-features","title":"2. Search Features","text":"<ul> <li>Search by ZIP Code: Allows users to enter ZIP codes for localized results.</li> <li>Search by City Name: Enables location lookup by city name to show relevant markers.</li> <li>Autocomplete Suggestions: Provides predictive suggestions while typing.</li> </ul> <p>Example Query: <pre><code>Search: \"Berlin\" or \"10115\"\n</code></pre> - Results display markers within the specified location.</p>"},{"location":"features/map-and-search/#3-marker-details-and-linking","title":"3. Marker Details and Linking","text":"<ul> <li>Clicking on a map marker opens a detail page with:<ul> <li>Location name.</li> <li>Description.</li> <li>Photos (if available).</li> <li>Contact information.</li> <li>Operating hours.</li> </ul> </li> <li>Links to additional resources or service bookings.</li> </ul>"},{"location":"features/map-and-search/#4-integration-with-backend","title":"4. Integration with Backend","text":"<ul> <li>Fetches geolocation data through RESTful APIs.</li> <li>Supports MySQL database queries for location-based filtering.</li> <li>Real-time updates for new locations or changes.</li> </ul>"},{"location":"features/map-and-search/#5-mobile-and-accessibility-support","title":"5. Mobile and Accessibility Support","text":"<ul> <li>Optimized for mobile devices with responsive layouts.</li> <li>Keyboard navigation and screen-reader compatibility for accessibility.</li> </ul>"},{"location":"features/map-and-search/#final-notes","title":"Final Notes","text":"<p>This module is designed to make navigation and information retrieval seamless for users. For additional enhancements or debugging tips, consult the GitHub repository.</p>"},{"location":"features/ui/","title":"UI Overview","text":"<p>This page outlines the design principles and components used to build the app\u2019s user interface.</p>"},{"location":"features/ui/#components","title":"Components","text":"<p>The following components make up the Gaia's Cycle UI:</p> <ol> <li>Header:</li> <li>Present at the top of every page.</li> <li>Includes the app logo, navigation links (Home, Dashboard, Stats), and a user profile dropdown.</li> <li> <p>Behavior: Stays fixed for easy access during scrolling.</p> </li> <li> <p>Footer:</p> </li> <li>Located at the bottom of every page.</li> <li>Contains links to the Privacy Policy, Terms of Service, Contact Us, and social media channels.</li> <li> <p>Minimalistic design to avoid visual clutter.</p> </li> <li> <p>Buttons:</p> </li> <li>Primary Buttons: Used for main actions like \"Submit\" or \"Save.\" Styled with the app\u2019s accent color for emphasis.</li> <li>Secondary Buttons: Used for auxiliary actions like \"Cancel\" or \"Back.\" Styled in neutral tones.</li> <li> <p>Interactive states (hover, focus, and active) provide immediate feedback to users.</p> </li> <li> <p>Forms:</p> </li> <li>Inputs include text fields, dropdowns, checkboxes, and radio buttons.</li> <li>Designed with clear labels, placeholders, and tooltips for guidance.</li> <li>Validation messages appear inline to assist users in correcting errors promptly.</li> </ol>"},{"location":"features/ui/#ui-design-principles","title":"UI Design Principles","text":"<ol> <li>Consistency:</li> <li>Uniform styling for components (buttons, fonts, colors) across all pages.</li> <li> <p>Consistent placement of navigation elements and action buttons to reduce confusion.</p> </li> <li> <p>Responsiveness:</p> </li> <li>The UI adapts fluidly to various screen sizes and orientations.</li> <li> <p>Uses flexible grids and scalable typography to ensure usability on desktops, tablets, and mobile devices.</p> </li> <li> <p>Accessibility:</p> </li> <li>Adheres to WCAG (Web Content Accessibility Guidelines) standards.</li> <li>Includes proper color contrast, alternative text for images, and support for screen readers.</li> <li>Keyboard navigation enabled for key actions.</li> </ol>"},{"location":"features/user-pages/","title":"General Pages Overview","text":"<p>This section describes the general pages of the web app and their purposes. Each page is designed to provide users with essential information and access to basic functions.</p>"},{"location":"features/user-pages/#home-page","title":"Home Page","text":""},{"location":"features/user-pages/#purpose","title":"Purpose","text":"<p>The Home Page serves as the central entry point for users. It provides an overview of Gaia's Cycle, offering easy access to key features and important updates. This page is designed to help users quickly navigate the app and begin their journey with Gaia's Cycle, whether they are new users or returning ones.</p>"},{"location":"features/user-pages/#layout","title":"Layout","text":"<p>The Home Page is divided into the following sections:</p>"},{"location":"features/user-pages/#1-navigation-bar","title":"1. Navigation Bar","text":"<ul> <li>Located at the top, the navigation bar provides links to essential pages like the Dashboard, Stats, Settings, and Profile.</li> <li>Includes the Gaia's Cycle logo, which, when clicked, redirects users to the homepage from any section of the app.</li> </ul>"},{"location":"features/user-pages/#2-welcome-message","title":"2. Welcome Message","text":"<ul> <li>A brief, friendly introduction to Gaia's Cycle, explaining the core mission of sustainable urban farming and encouraging users to engage with the app.</li> <li>Includes a call-to-action (CTA) button prompting users to sign up or log in if they haven't already.</li> </ul>"},{"location":"features/user-pages/#3-key-features-overview","title":"3. Key Features Overview","text":"<p>A visually appealing section that briefly highlights the app's primary features, such as:</p> <ul> <li>Waste Tracking: Monitor recyclable and organic waste.</li> <li>Sustainability Insights: View data-driven insights and tips for a greener lifestyle.</li> <li>Personal Stats: Track your progress and contributions to sustainability.</li> </ul> <p>Each feature includes a link to a more detailed page with further information.</p>"},{"location":"features/user-pages/#4-updatesnews","title":"4. Updates/News","text":"<ul> <li>A section dedicated to displaying recent news, announcements, or sustainability tips.</li> <li>This keeps users informed on the latest developments, updates to the app, or community-driven initiatives.</li> </ul>"},{"location":"features/user-pages/#5-footer","title":"5. Footer","text":"<ul> <li>Contains links to the Privacy Policy, Terms of Service, Support, and Social Media channels.</li> <li>Ensures that users have easy access to essential legal and support pages.</li> </ul>"},{"location":"features/user-pages/#functionality","title":"Functionality","text":"<p>The following interactions are available on the Home Page:</p> <ol> <li>Responsive Design:</li> <li>The Pages are designed to be fully responsive, ensuring a smooth experience whether accessed on a desktop, tablet, or smartphone.</li> </ol>"},{"location":"features/user-pages/#user-interaction","title":"User Interaction","text":"<ul> <li>Navigation: Clicking the navigation bar links directs users to the corresponding sections, such as Dashboard or Stats.</li> <li>information Section: Users can read through news or updates about Gaia's Cycle, helping them stay informed about new features and sustainability initiatives.</li> </ul>"},{"location":"features/user-pages/#visual-layout","title":"Visual Layout","text":"<p>The Home Page uses a clean, modern design that prioritizes accessibility and simplicity. Sections are clearly separated for easy navigation, and key information is highlighted with visuals such as icons and charts. The layout adapts seamlessly to various screen sizes, ensuring a consistent experience across devices.</p>"},{"location":"features/user-pages/#confirmed-sections-and-key-features","title":"Confirmed Sections and Key Features:","text":"<ol> <li>Navigation Bar: Links to Dashboard, Stats, Settings, and Profile. Includes Gaia's Cycle logo for easy navigation.</li> <li>Key Features Overview: Highlights waste tracking, sustainability insights, and personal stats with linked details.</li> <li>Updates Section: Dynamic section displaying relevant facts and information.</li> <li>Footer: Includes links to Privacy Policy, Terms of Service, Support, and Social Media channels.</li> </ol> <p>This structure ensures that users have a welcoming, informative, and easy-to-navigate homepage, providing all the essentials to get started with Gaia's Cycle.</p>"},{"location":"features/user-pages/#contact-us-page","title":"Contact Us Page","text":""},{"location":"features/user-pages/#purpose_1","title":"Purpose","text":"<p>The Contact Us page provides a direct communication channel between users and the Gaia's Cycle team. It enables users to ask questions, share feedback, or report issues, fostering trust and engagement.</p>"},{"location":"features/user-pages/#layout_1","title":"Layout","text":""},{"location":"features/user-pages/#1-header-section","title":"1. Header Section","text":"<ul> <li>Includes the page title (Contact Us) and a brief description of its purpose, such as: \"We\u2019re here to assist you with any questions or feedback.\"</li> </ul>"},{"location":"features/user-pages/#2-contact-form","title":"2. Contact Form","text":"<ul> <li>Name Field: A text input for users to enter their full name.</li> <li>Email Field: Ensures users provide a valid email address for follow-ups.</li> <li>Subject Field: Allows users to specify the reason for their message.</li> <li>Message Box: A large text area for detailed inquiries or feedback.</li> <li>Submit Button: Sends the completed form for processing.</li> </ul>"},{"location":"features/user-pages/#3-support-information","title":"3. Support Information","text":"<ul> <li>A support email address and phone number for alternative contact methods.</li> <li>Links to FAQ and Help Center for self-service support.</li> </ul>"},{"location":"features/user-pages/#4-footer","title":"4. Footer","text":"<ul> <li>Mirrors the main footer, linking to Privacy Policy, Terms of Service, and social media channels.</li> </ul>"},{"location":"features/user-pages/#functionality_1","title":"Functionality","text":""},{"location":"features/user-pages/#1-form-submission","title":"1. Form Submission","text":"<ul> <li>Users fill out and submit the form. A confirmation message appears post-submission: \"Thank you for reaching out! We\u2019ll get back to you shortly.\"</li> <li>The form integrates with backend services to log the query and optionally notify the support team.</li> </ul>"},{"location":"features/user-pages/#2-dynamic-fields","title":"2. Dynamic Fields","text":"<ul> <li>Validation ensures users provide all required information (e.g., valid email).</li> </ul>"},{"location":"features/user-pages/#user-interaction_1","title":"User Interaction","text":"<ul> <li>Form Usage:<ul> <li>Users complete the form with their query and submit it.</li> <li>Visual feedback guides the user (e.g., error messages for missing required fields).</li> </ul> </li> </ul>"},{"location":"features/user-pages/#visual-layout_1","title":"Visual Layout","text":"<ul> <li>A clean, user-friendly form design.</li> <li>Consistent with Gaia's Cycle's branding, using its color palette and typography.</li> <li>Designed to be mobile-friendly for accessibility across devices.</li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide provides a step-by-step process to set up the Gaia Cycle web application locally. Follow the instructions below to ensure a smooth installation.</p>"},{"location":"getting-started/installation/#1-clone-the-repository","title":"1. Clone the Repository","text":"<p>Use Git to clone the project repository. Run the following command in your terminal or command prompt:</p> <p><pre><code>git clone &lt;repository-url&gt;\n</code></pre> Replace <code>&lt;repository-url&gt;</code> with the actual URL of the repository.</p>"},{"location":"getting-started/installation/#2-navigate-to-the-project-directory","title":"2. Navigate to the Project Directory","text":"<p>Move into the cloned repository folder:</p> <pre><code>cd GaiasCycle\n</code></pre>"},{"location":"getting-started/installation/#3-install-dependencies","title":"3. Install Dependencies","text":"<p>Install all required dependencies listed in <code>requirements.txt</code> using pip:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/installation/#4-set-up-environment-variables","title":"4. Set Up Environment Variables","text":"<ol> <li>Create a <code>.env</code> file in the root directory.</li> <li>Add the required environment variables, such as database credentials and API keys:</li> </ol> <pre><code>DATABASE_URL=mysql://user:password@localhost/dbname\nSECRET_KEY=your_secret_key\nAPI_KEY=your_api_key\n</code></pre> <p>Replace the placeholders with actual values specific to your setup.</p>"},{"location":"getting-started/installation/#5-initialize-the-database","title":"5. Initialize the Database","text":"<p>Run database migrations to set up tables and schema:</p> <pre><code>python manage.py migrate\n</code></pre>"},{"location":"getting-started/installation/#6-run-the-application","title":"6. Run the Application","text":"<p>Start the development server:</p> <pre><code>python manage.py runserver\n</code></pre> <p>Access the application in your browser at: <pre><code>http://localhost:8000\n</code></pre></p>"},{"location":"getting-started/installation/#7-verify-setup","title":"7. Verify Setup","text":"<ul> <li>Confirm that all dependencies are installed and the server is running without errors.</li> <li>Navigate through the application to test the features.</li> </ul>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter errors during installation: - Verify dependencies using: <pre><code>pip freeze\n</code></pre> - Check logs for specific error messages. - Ensure database configurations are correct.</p>"},{"location":"getting-started/installation/#final-notes","title":"Final Notes","text":"<p>This installation guide covers the basic setup steps for Gaia Cycle. For additional support, refer to the GitHub repository.</p>"},{"location":"getting-started/prerequisites/","title":"Prerequisites","text":"<p>To set up and run the web app locally, ensure the following are in place:</p>"},{"location":"getting-started/prerequisites/#required-tools","title":"Required Tools","text":"<ol> <li>Python: Make sure Python 3.x is installed on your system.<ul> <li>To check: <code>python --version</code> or <code>python3 --version</code></li> <li>Download Python</li> </ul> </li> <li>Git: Ensure Git is installed for cloning the repository.<ul> <li>To check: <code>git --version</code></li> <li>Download Git</li> </ul> </li> <li>Text Editor or IDE: Use a code editor like Visual Studio Code, PyCharm, or any other IDE.</li> </ol>"},{"location":"getting-started/prerequisites/#understanding-virtual-environments","title":"Understanding Virtual Environments","text":"<p>A virtual environment is required to isolate the project dependencies. You'll use Python's built-in virtual environment tool (<code>venv</code>) to manage this.</p>"},{"location":"getting-started/prerequisites/#repository-access","title":"Repository Access","text":"<p>Ensure you have access to the GitHub repository containing the project code. Contact the project admin if you encounter issues.</p>"},{"location":"getting-started/running-the-app/","title":"Running the Application","text":"<p>Follow these steps to run the web application and its documentation locally.</p>"},{"location":"getting-started/running-the-app/#1-set-up-a-virtual-environment","title":"1. Set Up a Virtual Environment","text":"<p>To isolate the project dependencies, create and activate a virtual environment.</p>"},{"location":"getting-started/running-the-app/#create-the-virtual-environment","title":"Create the Virtual Environment","text":"<p>Run the following command : <pre><code>python3 -m venv &lt;environment-name&gt;\n</code></pre></p>"},{"location":"getting-started/running-the-app/#activate-the-virtual-environment","title":"Activate the Virtual Environment","text":""},{"location":"getting-started/running-the-app/#on-maclinux","title":"On Mac/Linux:","text":"<pre><code>source &lt;environment-name&gt;/bin/activate\n</code></pre>"},{"location":"getting-started/running-the-app/#on-windows","title":"On Windows:","text":"<p><pre><code>&lt;environment-name&gt;\\Scripts\\Activate.ps1\n</code></pre> You\u2019ll know the virtual environment is active when its name appears at the beginning of your terminal prompt.</p>"},{"location":"getting-started/running-the-app/#2-install-dependencies","title":"2. Install Dependencies","text":"<p>Dependencies for the project are listed in the requirements.txt file.</p>"},{"location":"getting-started/running-the-app/#run-this-command-to-install-them","title":"Run this command to install them:","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/running-the-app/#key-dependencies","title":"Key Dependencies:","text":"<ul> <li>fastapi: For the web framework.</li> <li>jinja2: For HTML templating.</li> <li>uvicorn: For running the FastAPI application.</li> <li>mkdocs-material: For building and serving the documentation.</li> </ul>"},{"location":"getting-started/running-the-app/#ensure-the-virtual-environment-is-active-before-running-the-above-command","title":"Ensure the virtual environment is active before running the above command.","text":""},{"location":"getting-started/running-the-app/#3-run-the-web-application","title":"3. Run the Web Application","text":"<p>Navigate to the app directory, then use Uvicorn to start the server:</p> <pre><code>cd app\n</code></pre> <p><pre><code>uvicorn main:app --reload\n</code></pre> The application will be accessible at:</p> <pre><code>http://127.0.0.1:8000\n</code></pre>"},{"location":"getting-started/running-the-app/#4-run-the-documentation","title":"4. Run the Documentation","text":"<p>To view the MkDocs-based documentation locally, use the following steps:</p> <p>Ensure the virtual environment is activated. Start the MkDocs server: <pre><code>mkdocs serve --dev-addr 127.0.0.1:5000\n</code></pre> Access the documentation in your browser at:</p> <p><pre><code>http://127.0.0.1:5000\n</code></pre> By following these steps, you can run both the application and its documentation locally for development and testing purposes.</p>"}]}